{"id":"../node_modules/@tonaljs/progression/dist/index.es.js","dependencies":[{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\progression\\dist\\index.es.js.map","includedInParent":true,"mtime":1596323947669},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\package.json","includedInParent":true,"mtime":1596323959438},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\progression\\package.json","includedInParent":true,"mtime":1596323947671},{"name":"@tonaljs/chord","loc":{"line":1,"column":25},"parent":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\progression\\dist\\index.es.js","resolved":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\chord\\dist\\index.es.js"},{"name":"@tonaljs/core","loc":{"line":2,"column":46},"parent":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\progression\\dist\\index.es.js","resolved":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\core\\dist\\index.es.js"},{"name":"@tonaljs/roman-numeral","loc":{"line":3,"column":20},"parent":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\progression\\dist\\index.es.js","resolved":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\roman-numeral\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromRomanNumerals = fromRomanNumerals;\nexports.toRomanNumerals = toRomanNumerals;\nexports.default = void 0;\n\nvar _chord = require(\"@tonaljs/chord\");\n\nvar _core = require(\"@tonaljs/core\");\n\nvar _romanNumeral = require(\"@tonaljs/roman-numeral\");\n\n/**\r\n * Given a tonic and a chord list expressed with roman numeral notation\r\n * returns the progression expressed with leadsheet chords symbols notation\r\n * @example\r\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\r\n * // => [\"C\", \"Dm7\", \"G7\"]\r\n */\nfunction fromRomanNumerals(tonic, chords) {\n  const romanNumerals = chords.map(_romanNumeral.get);\n  return romanNumerals.map(rn => (0, _core.transpose)(tonic, (0, _core.interval)(rn)) + rn.chordType);\n}\n/**\r\n * Given a tonic and a chord list with leadsheet symbols notation,\r\n * return the chord list with roman numeral notation\r\n * @example\r\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\r\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\r\n */\n\n\nfunction toRomanNumerals(tonic, chords) {\n  return chords.map(chord => {\n    const [note, chordType] = (0, _chord.tokenize)(chord);\n    const intervalName = (0, _core.distance)(tonic, note);\n    const roman = (0, _romanNumeral.get)((0, _core.interval)(intervalName));\n    return roman.name + chordType;\n  });\n}\n\nvar index = {\n  fromRomanNumerals,\n  toRomanNumerals\n};\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"cc057e0a73e6f76264c186d8dca83d8f","cacheData":{"env":{}}}