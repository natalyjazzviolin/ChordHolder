{"id":"../node_modules/@tonaljs/array/dist/index.es.js","dependencies":[{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\array\\dist\\index.es.js.map","includedInParent":true,"mtime":1596323947585},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\package.json","includedInParent":true,"mtime":1596323959438},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\array\\package.json","includedInParent":true,"mtime":1596323947587},{"name":"@tonaljs/core","loc":{"line":1,"column":21},"parent":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\array\\dist\\index.es.js","resolved":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\core\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compact = compact;\nexports.permutations = permutations;\nexports.range = range;\nexports.rotate = rotate;\nexports.shuffle = shuffle;\nexports.sortedNoteNames = sortedNoteNames;\nexports.sortedUniqNoteNames = sortedUniqNoteNames;\n\nvar _core = require(\"@tonaljs/core\");\n\n// ascending range\nfunction ascR(b, n) {\n  const a = []; // tslint:disable-next-line:curly\n\n  for (; n--; a[n] = n + b);\n\n  return a;\n} // descending range\n\n\nfunction descR(b, n) {\n  const a = []; // tslint:disable-next-line:curly\n\n  for (; n--; a[n] = b - n);\n\n  return a;\n}\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\n\n\nfunction range(from, to) {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} array\r\n * @return {Array} the rotated array\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\n\n\nfunction rotate(times, arr) {\n  const len = arr.length;\n  const n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n/**\r\n * Return a copy of the array with the null values removed\r\n * @function\r\n * @param {Array} array\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\n\n\nfunction compact(arr) {\n  return arr.filter(n => n === 0 || n);\n}\n/**\r\n * Sort an array of notes in ascending order. Pitch classes are listed\r\n * before notes. Any string that is not a note is removed.\r\n *\r\n * @param {string[]} notes\r\n * @return {string[]} sorted array of notes\r\n *\r\n * @example\r\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\r\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\r\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\r\n * // => ['C', 'F', 'G', 'A', 'B']\r\n */\n\n\nfunction sortedNoteNames(notes) {\n  const valid = notes.map(n => (0, _core.note)(n)).filter(n => !n.empty);\n  return valid.sort((a, b) => a.height - b.height).map(n => n.name);\n}\n/**\r\n * Get sorted notes with duplicates removed. Pitch classes are listed\r\n * before notes.\r\n *\r\n * @function\r\n * @param {string[]} array\r\n * @return {string[]} unique sorted notes\r\n *\r\n * @example\r\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\r\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\r\n */\n\n\nfunction sortedUniqNoteNames(arr) {\n  return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n/**\r\n * Randomizes the order of the specified array in-place, using the Fisherâ€“Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} array\r\n * @return {Array} the array shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\n\n\nfunction shuffle(arr, rnd = Math.random) {\n  let i;\n  let t;\n  let m = arr.length;\n\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n\n  return arr;\n}\n/**\r\n * Get all permutations of an array\r\n *\r\n * @param {Array} array - the array\r\n * @return {Array<Array>} an array with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\n\n\nfunction permutations(arr) {\n  if (arr.length === 0) {\n    return [[]];\n  }\n\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(arr.map((e, pos) => {\n      const newPerm = perm.slice();\n      newPerm.splice(pos, 0, arr[0]);\n      return newPerm;\n    }));\n  }, []);\n}"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"10f554695b857cbb8b3679f07e998439","cacheData":{"env":{}}}