{"id":"../node_modules/@tonaljs/abc-notation/dist/index.es.js","dependencies":[{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\abc-notation\\dist\\index.es.js.map","includedInParent":true,"mtime":1596323947580},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\package.json","includedInParent":true,"mtime":1596323959438},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\abc-notation\\package.json","includedInParent":true,"mtime":1596323947582},{"name":"@tonaljs/core","loc":{"line":1,"column":71},"parent":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\abc-notation\\dist\\index.es.js","resolved":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\core\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.abcToScientificNotation = abcToScientificNotation;\nexports.distance = distance;\nexports.scientificToAbcNotation = scientificToAbcNotation;\nexports.tokenize = tokenize;\nexports.transpose = transpose;\nexports.default = void 0;\n\nvar _core = require(\"@tonaljs/core\");\n\nconst fillStr = (character, times) => Array(times + 1).join(character);\n\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\n\nfunction tokenize(str) {\n  const m = REGEX.exec(str);\n\n  if (!m) {\n    return [\"\", \"\", \"\"];\n  }\n\n  return [m[1], m[2], m[3]];\n}\n/**\r\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\r\n *\r\n * @example\r\n * abcToScientificNotation(\"c\") // => \"C5\"\r\n */\n\n\nfunction abcToScientificNotation(str) {\n  const [acc, letter, oct] = tokenize(str);\n\n  if (letter === \"\") {\n    return \"\";\n  }\n\n  let o = 4;\n\n  for (let i = 0; i < oct.length; i++) {\n    o += oct.charAt(i) === \",\" ? -1 : 1;\n  }\n\n  const a = acc[0] === \"_\" ? acc.replace(/_/g, \"b\") : acc[0] === \"^\" ? acc.replace(/\\^/g, \"#\") : \"\";\n  return letter.charCodeAt(0) > 96 ? letter.toUpperCase() + a + (o + 1) : letter + a + o;\n}\n/**\r\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\r\n *\r\n * @example\r\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\r\n */\n\n\nfunction scientificToAbcNotation(str) {\n  const n = (0, _core.note)(str);\n\n  if (n.empty || !n.oct) {\n    return \"\";\n  }\n\n  const {\n    letter,\n    acc,\n    oct\n  } = n;\n  const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\n  const l = oct > 4 ? letter.toLowerCase() : letter;\n  const o = oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\n  return a + l + o;\n}\n\nfunction transpose(note, interval) {\n  return scientificToAbcNotation((0, _core.transpose)(abcToScientificNotation(note), interval));\n}\n\nfunction distance(from, to) {\n  return (0, _core.distance)(abcToScientificNotation(from), abcToScientificNotation(to));\n}\n\nvar index = {\n  abcToScientificNotation,\n  scientificToAbcNotation,\n  tokenize,\n  transpose,\n  distance\n};\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"d08166e3f1373e8836628337fdb7868a","cacheData":{"env":{}}}