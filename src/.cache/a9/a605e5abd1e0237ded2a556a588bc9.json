{"id":"../node_modules/@tonaljs/midi/dist/index.es.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\midi\\dist\\index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313178655},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\midi\\package.json","includedInParent":true,"mtime":1596312984529},{"name":"@tonaljs/core","loc":{"line":1,"column":21},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\midi\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\core\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.freqToMidi = freqToMidi;\nexports.isMidi = isMidi;\nexports.midiToFreq = midiToFreq;\nexports.midiToNoteName = midiToNoteName;\nexports.toMidi = toMidi;\nexports.default = void 0;\n\nvar _core = require(\"@tonaljs/core\");\n\nfunction isMidi(arg) {\n  return +arg >= 0 && +arg <= 127;\n}\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\n\n\nfunction toMidi(note$1) {\n  if (isMidi(note$1)) {\n    return +note$1;\n  }\n\n  const n = (0, _core.note)(note$1);\n  return n.empty ? null : n.midi;\n}\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\n\n\nfunction midiToFreq(midi, tuning = 440) {\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\n\nfunction freqToMidi(freq) {\n  const v = 12 * (Math.log(freq) - L440) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\n\nfunction midiToNoteName(midi, options = {}) {\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n  midi = Math.round(midi);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[midi % 12];\n\n  if (options.pitchClass) {\n    return pc;\n  }\n\n  const o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nvar index = {\n  isMidi,\n  toMidi,\n  midiToFreq,\n  midiToNoteName,\n  freqToMidi\n};\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"578e63c8d00ea9349af6a9321785289e","cacheData":{"env":{}}}