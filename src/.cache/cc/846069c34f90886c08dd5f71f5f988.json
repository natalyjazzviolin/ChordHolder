{"id":"../node_modules/@tonaljs/duration-value/dist/index.es.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\duration-value\\dist\\index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313178655},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\duration-value\\package.json","includedInParent":true,"mtime":1596312984530}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.get = get;\nexports.names = names;\nexports.shorthands = shorthands;\nexports.value = exports.fraction = exports.default = void 0;\n// source: https://en.wikipedia.org/wiki/Note_value\nconst DATA = [[0.125, \"dl\", [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"]], [0.25, \"l\", [\"long\", \"longa\"]], [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]], [1, \"w\", [\"whole\", \"semibreve\"]], [2, \"h\", [\"half\", \"minim\"]], [4, \"q\", [\"quarter\", \"crotchet\"]], [8, \"e\", [\"eighth\", \"quaver\"]], [16, \"s\", [\"sixteenth\", \"semiquaver\"]], [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]], [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]], [128, \"h\", [\"hundred twenty-eighth\"]], [256, \"th\", [\"two hundred fifty-sixth\"]]];\nconst VALUES = [];\nDATA.forEach(([denominator, shorthand, names]) => add(denominator, shorthand, names));\nconst NoDuration = {\n  empty: true,\n  name: \"\",\n  value: 0,\n  fraction: [0, 0],\n  shorthand: \"\",\n  dots: \"\",\n  names: []\n};\n\nfunction names() {\n  return VALUES.reduce((names, duration) => {\n    duration.names.forEach(name => names.push(name));\n    return names;\n  }, []);\n}\n\nfunction shorthands() {\n  return VALUES.map(dur => dur.shorthand);\n}\n\nconst REGEX = /^([^.]+)(\\.*)$/;\n\nfunction get(name) {\n  const [_, simple, dots] = REGEX.exec(name) || [];\n  const base = VALUES.find(dur => dur.shorthand === simple || dur.names.includes(simple));\n\n  if (!base) {\n    return NoDuration;\n  }\n\n  const fraction = calcDots(base.fraction, dots.length);\n  const value = fraction[0] / fraction[1];\n  return { ...base,\n    name,\n    dots,\n    value,\n    fraction\n  };\n}\n\nconst value = name => get(name).value;\n\nexports.value = value;\n\nconst fraction = name => get(name).fraction;\n\nexports.fraction = fraction;\nvar index = {\n  names,\n  shorthands,\n  get,\n  value,\n  fraction\n}; //// PRIVATE ////\n\nfunction add(denominator, shorthand, names) {\n  VALUES.push({\n    empty: false,\n    dots: \"\",\n    name: \"\",\n    value: 1 / denominator,\n    fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\n    shorthand,\n    names\n  });\n}\n\nfunction calcDots(fraction, dots) {\n  const pow = Math.pow(2, dots);\n  let numerator = fraction[0] * pow;\n  let denominator = fraction[1] * pow;\n  const base = numerator; // add fractions\n\n  for (let i = 0; i < dots; i++) {\n    numerator += base / Math.pow(2, i + 1);\n  } // simplify\n\n\n  while (numerator % 2 === 0 && denominator % 2 === 0) {\n    numerator /= 2;\n    denominator /= 2;\n  }\n\n  return [numerator, denominator];\n}\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"7fedbf65324cba5ab02c551c6d9788ab","cacheData":{"env":{}}}