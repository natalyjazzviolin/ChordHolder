{"id":"../node_modules/tone/build/esm/core/type/Units.js","dependencies":[{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\tone\\build\\esm\\core\\type\\Units.js.map","includedInParent":true,"mtime":1596323958859},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\tone\\Tone\\core\\type\\Units.ts","includedInParent":true,"mtime":1596323958552},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\package.json","includedInParent":true,"mtime":1596323959438},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\tone\\package.json","includedInParent":true,"mtime":1596323959121}],"generated":{"js":""},"sourceMaps":{"js":{"version":3,"file":"Units.js","sourceRoot":"","sources":["../../../../Tone/core/type/Units.ts"],"names":[],"mappings":"","sourcesContent":["export * from \"./NoteUnits\";\r\n\r\nimport { Note } from \"./NoteUnits\";\r\n\r\n/**\r\n * A number representing a time in seconds\r\n * @category Unit\r\n */\r\nexport type Seconds = number;\r\n\r\n/**\r\n * A number used to measure the intensity of a sound on a logarithmic scale.\r\n * @category Unit\r\n */\r\nexport type Decibels = number;\r\n\r\n/**\r\n * A number that is between [0, 1]\r\n * @category Unit\r\n */\r\nexport type NormalRange = number;\r\n\r\n/**\r\n * A number that is between [-1, 1]\r\n * @category Unit\r\n */\r\nexport type AudioRange = number;\r\n\r\n/**\r\n * Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\r\n * @category Unit\r\n */\r\nexport type Interval = number;\r\n\r\n/**\r\n * A number representing the multiplication factor applied to a signal\r\n * @category Unit\r\n */\r\nexport type GainFactor = number;\r\n\r\n/**\r\n * A number greater than or equal to 0.\r\n * @category Unit\r\n */\r\nexport type Positive = number;\r\n\r\n/**\r\n * Represents a subdivision of a measure.\r\n * The number represents the subdivision. \"t\" represents a triplet. A \".\" add a half.\r\n * e.g. \"4n\" is a quarter note, \"4t\" is a quarter note triplet, and \"4n.\" is a dotted quarter note.\r\n * @category Unit\r\n */\r\nexport type Subdivision = \"1m\" | \"1n\" | \"1n.\" | \"2n\" | \"2n.\" | \"2t\" | \"4n\" | \"4n.\" | \"4t\" | \"8n\" | \"8n.\" | \"8t\" |\r\n\"16n\" | \"16n.\" | \"16t\" | \"32n\" | \"32n.\" | \"32t\" | \"64n\" | \"64n.\" | \"64t\" | \"128n\" | \"128n.\" | \"128t\" |\r\n\"256n\" | \"256n.\" | \"256t\" | \"0\";\r\n\r\n/**\r\n * A time object has a subdivision as the keys and a number as the values.\r\n * @example\r\n * Tone.Time({\r\n * \t\"2n\": 1,\r\n * \t\"8n\": 3\r\n * }).valueOf(); // 2n + 8n * 3\r\n * @category Unit\r\n */\r\nexport type TimeObject = {\r\n\t[sub in Subdivision]?: number;\r\n};\r\n\r\n/**\r\n * Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\r\n * * Numbers, which will be taken literally as the time (in seconds).\r\n * * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\r\n * * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times in the form BARS:QUARTERS:SIXTEENTHS.\r\n * * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\r\n * * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \"the current time plus whatever expression follows\".\r\n * * Object, ({\"4n\" : 3, \"8t\" : -1}). The resulting time is equal to the sum of all of the keys multiplied by the values in the object.\r\n * * No Argument, for methods which accept time, no argument will be interpreted as \"now\" (i.e. the currentTime).\r\n * @category Unit\r\n */\r\nexport type Time = string | Seconds | TimeObject | Subdivision;\r\n\r\n/**\r\n * Frequency can be described similar to time, except ultimately the\r\n * values are converted to frequency instead of seconds. A number\r\n * is taken literally as the value in hertz. Additionally any of the\r\n * Time encodings can be used. Note names in the form\r\n * of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\r\n * frequency value.\r\n * @category Unit\r\n */\r\nexport type Frequency = Subdivision | Note | string | Hertz;\r\n\r\n/**\r\n *\r\n * @category Unit\r\n */\r\nexport type TimeSignature = number | number[];\r\n\r\n/**\r\n * TransportTime describes a position along the Transport's timeline. It is\r\n * similar to Time in that it uses all the same encodings, but TransportTime specifically\r\n * pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\r\n * [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\r\n * @category Unit\r\n */\r\nexport type TransportTime = Time;\r\n\r\n/**\r\n * Ticks are the basic subunit of the Transport. They are\r\n * the smallest unit of time that the Transport supports.\r\n * @category Unit\r\n */\r\nexport type Ticks = number;\r\n\r\n/**\r\n * Beats per minute\r\n * @category Unit\r\n */\r\nexport type BPM = number;\r\n\r\n/**\r\n * Angle between 0 and 360.\r\n * @category Unit\r\n */\r\nexport type Degrees = number;\r\n\r\n/**\r\n * Angle between 0 and 2 * PI.\r\n * @category Unit\r\n */\r\nexport type Radians = number;\r\n\r\n/**\r\n * A colon-separated representation of time in the form of\r\n * Bars:Beats:Sixteenths.\r\n * @category Unit\r\n */\r\nexport type BarsBeatsSixteenths = string;\r\n/**\r\n * Sampling is the reduction of a continuous signal to a discrete signal.\r\n * Audio is typically sampled 44100 times per second.\r\n * @category Unit\r\n */\r\nexport type Samples = number;\r\n\r\n/**\r\n * Hertz are a frequency representation defined as one cycle per second.\r\n * @category Unit\r\n */\r\nexport type Hertz = number;\r\n\r\n/**\r\n * A Cent is 1/100th of a semitone.\r\n * e.g. a value of 50 cents would be halfway between two intervals.\r\n * @category Unit\r\n */\r\nexport type Cents = number;\r\n\r\n/**\r\n * One millisecond is a thousandth of a second.\r\n * @category Unit\r\n */\r\nexport type Milliseconds = number;\r\n\r\n/**\r\n * A value which is a power of 2\r\n * @category Unit\r\n */\r\nexport type PowerOfTwo = number;\r\n\r\n/**\r\n * Map the unit name to a unit value\r\n */\r\nexport interface UnitMap {\r\n\tnumber: number;\r\n\tdecibels: Decibels;\r\n\tnormalRange: NormalRange;\r\n\taudioRange: AudioRange;\r\n\tgain: GainFactor;\r\n\tpositive: Positive;\r\n\ttime: Time;\r\n\tfrequency: Frequency;\r\n\ttransportTime: TransportTime;\r\n\tticks: Ticks;\r\n\tbpm: BPM;\r\n\tdegrees: Degrees;\r\n\tradians: Radians;\r\n\tsamples: Samples;\r\n\thertz: Hertz;\r\n\tcents: Cents;\r\n}\r\n\r\n/**\r\n * All of the unit types\r\n * @category Unit\r\n */\r\nexport type Unit = UnitMap[keyof UnitMap];\r\n\r\n/**\r\n * All of the unit names\r\n * @category Unit\r\n */\r\nexport type UnitName = keyof UnitMap;\r\n"]}},"error":null,"hash":"fe8ab01195bcfd08f9423287406049ef","cacheData":{"env":{}}}