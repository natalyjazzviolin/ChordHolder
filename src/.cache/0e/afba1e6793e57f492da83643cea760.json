{"id":"../node_modules/@tonaljs/range/dist/index.es.js","dependencies":[{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\range\\dist\\index.es.js.map","includedInParent":true,"mtime":1596323947675},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\package.json","includedInParent":true,"mtime":1596323959438},{"name":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\range\\package.json","includedInParent":true,"mtime":1596323947677},{"name":"@tonaljs/collection","loc":{"line":1,"column":31},"parent":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\range\\dist\\index.es.js","resolved":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\collection\\dist\\index.es.js"},{"name":"@tonaljs/midi","loc":{"line":2,"column":39},"parent":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\range\\dist\\index.es.js","resolved":"C:\\Projects\\ChordHolder\\ChordHolder\\node_modules\\@tonaljs\\midi\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.chromatic = chromatic;\nexports.numeric = numeric;\nexports.default = void 0;\n\nvar _collection = require(\"@tonaljs/collection\");\n\nvar _midi = require(\"@tonaljs/midi\");\n\n/**\r\n * Create a numeric range. You supply a list of notes or numbers and it will\r\n * be connected to create complex ranges.\r\n *\r\n * @param {Array} array - the list of notes or numbers used\r\n * @return {Array} an array of numbers or empty array if not valid parameters\r\n *\r\n * @example\r\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\r\n * // it works midi notes\r\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\r\n * // complex range\r\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\r\n */\nfunction numeric(notes) {\n  const midi = (0, _collection.compact)(notes.map(_midi.toMidi));\n\n  if (!notes.length || midi.length !== notes.length) {\n    // there is no valid notes\n    return [];\n  }\n\n  return midi.reduce((result, note) => {\n    const last = result[result.length - 1];\n    return result.concat((0, _collection.range)(last, note).slice(1));\n  }, [midi[0]]);\n}\n/**\r\n * Create a range of chromatic notes. The altered notes will use flats.\r\n *\r\n * @function\r\n * @param {String|Array} list - the list of notes or midi note numbers\r\n * @return {Array} an array of note names\r\n *\r\n * @example\r\n * Range.chromatic(\"C2 E2 D2\") // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\r\n * // with sharps\r\n * Range.chromatic(\"C2 C3\", true) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\r\n */\n\n\nfunction chromatic(notes, options) {\n  return numeric(notes).map(midi => (0, _midi.midiToNoteName)(midi, options));\n}\n\nvar index = {\n  numeric,\n  chromatic\n};\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"b22b115441c809c139170bc79c298101","cacheData":{"env":{}}}