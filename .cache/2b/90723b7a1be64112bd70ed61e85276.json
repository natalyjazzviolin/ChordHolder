{"id":"../node_modules/@tonaljs/chord-type/dist/index.es.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-type\\dist\\index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313565786},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-type\\package.json","includedInParent":true,"mtime":1596312984529},{"name":"@tonaljs/core","loc":{"line":1,"column":26},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-type\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\core\\dist\\index.es.js"},{"name":"@tonaljs/pcset","loc":{"line":2,"column":41},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-type\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\pcset\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add = add;\nexports.addAlias = addAlias;\nexports.all = all;\nexports.get = get;\nexports.keys = keys;\nexports.names = names;\nexports.removeAll = removeAll;\nexports.symbols = symbols;\nexports.entries = exports.chordType = exports.default = void 0;\n\nvar _core = require(\"@tonaljs/core\");\n\nvar _pcset = require(\"@tonaljs/pcset\");\n\n/**\r\n * @private\r\n * Chord List\r\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\r\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\r\n */\nconst CHORDS = [// ==Major==\n[\"1P 3M 5P\", \"major\", \"M ^ \"], [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"], [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"], [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"], [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"], [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69 M69\"], [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"], [\"1P 3M 5P 7M 11A\", \"major seventh sharp eleventh\", \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\"], // ==Minor==\n// '''Normal'''\n[\"1P 3m 5P\", \"minor\", \"m min -\"], [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"], [\"1P 3m 5P 7M\", \"minor/major seventh\", \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7\"], [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"], [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"], [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"], [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"], [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"], // '''Diminished'''\n[\"1P 3m 5d\", \"diminished\", \"dim ° o\"], [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"], [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"], // ==Dominant/Seventh==\n// '''Normal'''\n[\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"], [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"], [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"], [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"], // '''Altered'''\n[\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"], [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"], [\"1P 3M 7m 9m\", \"altered\", \"alt7\"], // '''Suspended'''\n[\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"], [\"1P 2M 5P\", \"suspended second\", \"sus2\"], [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"], [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"], [\"1P 4P 5P 7m 9m\", \"suspended fourth flat ninth\", \"b9sus phryg 7b9sus 7b9sus4\"], // ==Other==\n[\"1P 5P\", \"fifth\", \"5\"], [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"], [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"], [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"], [\"1P 3M 5P 7M 9M 11A\", \"major sharp eleventh (lydian)\", \"maj9#11 Δ9#11 ^9#11\"], // ==Legacy==\n[\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"], [\"1P 3M 13m\", \"\", \"Mb6\"], [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"], [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"], [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"], [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"], [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"], [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"], [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"], [\"1P 3M 5A 9A\", \"\", \"+add#9\"], [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"], [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"], [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"], [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"], [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"], [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"], [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"], [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"], [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"], [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"], [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"], [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"], [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"], [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"], [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"], [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"], [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"], [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"], [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"], [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"], [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"], [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"], [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"], [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"], [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"], [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"], [\"1P 3M 5P 9m\", \"\", \"Maddb9\"], [\"1P 3M 5d\", \"\", \"Mb5\"], [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"], [\"1P 3M 5d 7M\", \"\", \"M7b5\"], [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"], [\"1P 3M 5d 7m\", \"\", \"7b5\"], [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"], [\"1P 3M 7m\", \"\", \"7no5\"], [\"1P 3M 7m 13m\", \"\", \"7b13\"], [\"1P 3M 7m 9M\", \"\", \"9no5\"], [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"], [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"], [\"1P 3m 4P 5P\", \"\", \"madd4\"], [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"], [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"], [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"], [\"1P 3m 5P 9M\", \"\", \"madd9\"], [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"], [\"1P 3m 5d 7M\", \"\", \"oM7\"], [\"1P 3m 6m 7M\", \"\", \"mb6M7\"], [\"1P 3m 6m 7m\", \"\", \"m7#5\"], [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"], [\"1P 3m 6m 7m 9M 11P\", \"\", \"m11A\"], [\"1P 3m 6m 9m\", \"\", \"mb6b9\"], [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"], [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"], [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"], [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"], [\"1P 4P 5P 7M\", \"\", \"M7sus4\"], [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"], [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"], [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"], [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"], [\"1P 4P 7m 10m\", \"\", \"4 quartal\"], [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"]];\nconst NoChordType = { ..._pcset.EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: []\n};\nlet dictionary = [];\nlet index = {};\n/**\r\n * Given a chord name or chroma, return the chord properties\r\n * @param {string} source - chord name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/chord-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\n\nfunction get(type) {\n  return index[type] || NoChordType;\n}\n\nconst chordType = (0, _core.deprecate)(\"ChordType.chordType\", \"ChordType.get\", get);\n/**\r\n * Get all chord (long) names\r\n */\n\nexports.chordType = chordType;\n\nfunction names() {\n  return dictionary.map(chord => chord.name).filter(x => x);\n}\n/**\r\n * Get all chord symbols\r\n */\n\n\nfunction symbols() {\n  return dictionary.map(chord => chord.aliases[0]).filter(x => x);\n}\n/**\r\n * Keys used to reference chord types\r\n */\n\n\nfunction keys() {\n  return Object.keys(index);\n}\n/**\r\n * Return a list of all chord types\r\n */\n\n\nfunction all() {\n  return dictionary.slice();\n}\n\nconst entries = (0, _core.deprecate)(\"ChordType.entries\", \"ChordType.all\", all);\n/**\r\n * Clear the dictionary\r\n */\n\nexports.entries = entries;\n\nfunction removeAll() {\n  dictionary = [];\n  index = {};\n}\n/**\r\n * Add a chord to the dictionary.\r\n * @param intervals\r\n * @param aliases\r\n * @param [fullName]\r\n */\n\n\nfunction add(intervals, aliases, fullName) {\n  const quality = getQuality(intervals);\n  const chord = { ...(0, _pcset.get)(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases\n  };\n  dictionary.push(chord);\n\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach(alias => addAlias(chord, alias));\n}\n\nfunction addAlias(chord, alias) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals) {\n  const has = interval => intervals.indexOf(interval) !== -1;\n\n  return has(\"5A\") ? \"Augmented\" : has(\"3M\") ? \"Major\" : has(\"5d\") ? \"Diminished\" : has(\"3m\") ? \"Minor\" : \"Unknown\";\n}\n\nCHORDS.forEach(([ivls, fullName, names]) => add(ivls.split(\" \"), names.split(\" \"), fullName));\ndictionary.sort((a, b) => a.setNum - b.setNum);\nvar index$1 = {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType\n};\nvar _default = index$1;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"28502b99c2a98d2d725795af631a750f","cacheData":{"env":{}}}