{"id":"../node_modules/@tonaljs/time-signature/dist/index.es.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\time-signature\\dist\\index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313565786},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\time-signature\\package.json","includedInParent":true,"mtime":1596312984530}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.get = get;\nexports.names = names;\nexports.parse = parse;\nexports.default = void 0;\n// CONSTANTS\nconst NONE = {\n  empty: true,\n  name: \"\",\n  upper: undefined,\n  lower: undefined,\n  type: undefined,\n  additive: []\n};\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"]; // PUBLIC API\n\nfunction names() {\n  return NAMES.slice();\n}\n\nconst REGEX = /^(\\d?\\d(?:\\+\\d)*)\\/(\\d)$/;\nconst CACHE = new Map();\n\nfunction get(literal) {\n  const cached = CACHE.get(literal);\n\n  if (cached) {\n    return cached;\n  }\n\n  const ts = build(parse(literal));\n  CACHE.set(literal, ts);\n  return ts;\n}\n\nfunction parse(literal) {\n  if (typeof literal === \"string\") {\n    const [_, up, low] = REGEX.exec(literal) || [];\n    return parse([up, low]);\n  }\n\n  const [up, down] = literal;\n  const denominator = +down;\n\n  if (typeof up === \"number\") {\n    return [up, denominator];\n  }\n\n  const list = up.split(\"+\").map(n => +n);\n  return list.length === 1 ? [list[0], denominator] : [list, denominator];\n}\n\nvar index = {\n  names,\n  parse,\n  get\n}; // PRIVATE\n\nfunction build([up, down]) {\n  const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\n  const lower = down;\n\n  if (upper === 0 || lower === 0) {\n    return NONE;\n  }\n\n  const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\n  const additive = Array.isArray(up) ? up : [];\n  const type = lower === 4 || lower === 2 ? \"simple\" : lower === 8 && upper % 3 === 0 ? \"compound\" : \"irregular\";\n  return {\n    empty: false,\n    name,\n    type,\n    upper,\n    lower,\n    additive\n  };\n}\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"390a144d2e9d4b327f3cc13019e5e5f9","cacheData":{"env":{}}}