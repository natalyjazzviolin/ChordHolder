{"id":"../node_modules/@tonaljs/note/dist/index.es.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\note\\dist\\index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313565786},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\note\\package.json","includedInParent":true,"mtime":1596312984530},{"name":"@tonaljs/core","loc":{"line":1,"column":60},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\note\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\core\\dist\\index.es.js"},{"name":"@tonaljs/midi","loc":{"line":2,"column":43},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\note\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\midi\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromFreq = fromFreq;\nexports.fromFreqSharps = fromFreqSharps;\nexports.fromMidi = fromMidi;\nexports.fromMidiSharps = fromMidiSharps;\nexports.names = names;\nexports.sortedNames = sortedNames;\nexports.sortedUniqNames = sortedUniqNames;\nexports.transposeFifths = transposeFifths;\nexports.transposeFrom = exports.transposeBy = exports.transpose = exports.trFrom = exports.trFifths = exports.trBy = exports.tr = exports.simplify = exports.pitchClass = exports.octave = exports.name = exports.midi = exports.get = exports.freq = exports.enharmonic = exports.descending = exports.chroma = exports.ascending = exports.accidentals = exports.default = void 0;\n\nvar _core = require(\"@tonaljs/core\");\n\nvar _midi = require(\"@tonaljs/midi\");\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = n => n.name;\n\nconst onlyNotes = array => array.map(_core.note).filter(n => !n.empty);\n/**\r\n * Return the natural note names without octave\r\n * @function\r\n * @example\r\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\r\n */\n\n\nfunction names(array) {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n/**\r\n * Get a note from a note name\r\n *\r\n * @function\r\n * @example\r\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\n\n\nconst get = _core.note;\n/**\r\n * Get the note name\r\n * @function\r\n */\n\nexports.get = get;\n\nconst name = note => get(note).name;\n/**\r\n * Get the note pitch class name\r\n * @function\r\n */\n\n\nexports.name = name;\n\nconst pitchClass = note => get(note).pc;\n/**\r\n * Get the note accidentals\r\n * @function\r\n */\n\n\nexports.pitchClass = pitchClass;\n\nconst accidentals = note => get(note).acc;\n/**\r\n * Get the note octave\r\n * @function\r\n */\n\n\nexports.accidentals = accidentals;\n\nconst octave = note => get(note).oct;\n/**\r\n * Get the note midi\r\n * @function\r\n */\n\n\nexports.octave = octave;\n\nconst midi = note => get(note).midi;\n/**\r\n * Get the note midi\r\n * @function\r\n */\n\n\nexports.midi = midi;\n\nconst freq = note => get(note).freq;\n/**\r\n * Get the note chroma\r\n * @function\r\n */\n\n\nexports.freq = freq;\n\nconst chroma = note => get(note).chroma;\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidi(61) // => \"Db4\"\r\n * Note.fromMidi(61.7) // => \"D4\"\r\n */\n\n\nexports.chroma = chroma;\n\nfunction fromMidi(midi) {\n  return (0, _midi.midiToNoteName)(midi);\n}\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\n\n\nfunction fromFreq(freq) {\n  return (0, _midi.midiToNoteName)((0, _midi.freqToMidi)(freq));\n}\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\n\n\nfunction fromFreqSharps(freq) {\n  return (0, _midi.midiToNoteName)((0, _midi.freqToMidi)(freq), {\n    sharps: true\n  });\n}\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidiSharps(61) // => \"C#4\"\r\n */\n\n\nfunction fromMidiSharps(midi) {\n  return (0, _midi.midiToNoteName)(midi, {\n    sharps: true\n  });\n}\n/**\r\n * Transpose a note by an interval\r\n */\n\n\nconst transpose = _core.transpose;\nexports.transpose = transpose;\nconst tr = _core.transpose;\n/**\r\n * Transpose by an interval.\r\n * @function\r\n * @param {string} interval\r\n * @return {function} a function that transposes by the given interval\r\n * @example\r\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\r\n * // => [\"G\", \"A\", \"B\"]\r\n */\n\nexports.tr = tr;\n\nconst transposeBy = interval => note => transpose(note, interval);\n\nexports.transposeBy = transposeBy;\nconst trBy = transposeBy;\n/**\r\n * Transpose from a note\r\n * @function\r\n * @param {string} note\r\n * @return {function}  a function that transposes the the note by an interval\r\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\r\n * // => [\"C\", \"E\", \"G\"]\r\n */\n\nexports.trBy = trBy;\n\nconst transposeFrom = note => interval => transpose(note, interval);\n\nexports.transposeFrom = transposeFrom;\nconst trFrom = transposeFrom;\n/**\r\n * Transpose a note by a number of perfect fifths.\r\n *\r\n * @function\r\n * @param {string} note - the note name\r\n * @param {number} fifhts - the number of fifths\r\n * @return {string} the transposed note name\r\n *\r\n * @example\r\n * import { transposeFifths } from \"@tonaljs/note\"\r\n * transposeFifths(\"G4\", 1) // => \"D\"\r\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\r\n */\n\nexports.trFrom = trFrom;\n\nfunction transposeFifths(noteName, fifths) {\n  const note = get(noteName);\n\n  if (note.empty) {\n    return \"\";\n  }\n\n  const [nFifths, nOcts] = note.coord;\n  const transposed = nOcts === undefined ? (0, _core.coordToNote)([nFifths + fifths]) : (0, _core.coordToNote)([nFifths + fifths, nOcts]);\n  return transposed.name;\n}\n\nconst trFifths = transposeFifths;\nexports.trFifths = trFifths;\n\nconst ascending = (a, b) => a.height - b.height;\n\nexports.ascending = ascending;\n\nconst descending = (a, b) => b.height - a.height;\n\nexports.descending = descending;\n\nfunction sortedNames(notes, comparator) {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nfunction sortedUniqNames(notes) {\n  return sortedNames(notes, ascending).filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n/**\r\n * Simplify a note\r\n *\r\n * @function\r\n * @param {string} note - the note to be simplified\r\n * - sameAccType: default true. Use same kind of accidentals that source\r\n * @return {string} the simplified note or '' if not valid note\r\n * @example\r\n * simplify(\"C##\") // => \"D\"\r\n * simplify(\"C###\") // => \"D#\"\r\n * simplify(\"C###\")\r\n * simplify(\"B#4\") // => \"C5\"\r\n */\n\n\nconst simplify = nameBuilder(true);\n/**\r\n * Get enharmonic of a note\r\n *\r\n * @function\r\n * @param {string} note\r\n * @return {string} the enharmonic note or '' if not valid note\r\n * @example\r\n * Note.enharmonic(\"Db\") // => \"C#\"\r\n * Note.enharmonic(\"C\") // => \"C\"\r\n */\n\nexports.simplify = simplify;\nconst enharmonic = nameBuilder(false);\nexports.enharmonic = enharmonic;\n\nfunction nameBuilder(sameAccidentals) {\n  return noteName => {\n    const note = get(noteName);\n\n    if (note.empty) {\n      return \"\";\n    }\n\n    const sharps = sameAccidentals ? note.alt > 0 : note.alt < 0;\n    const pitchClass = note.midi === null;\n    return (0, _midi.midiToNoteName)(note.midi || note.chroma, {\n      sharps,\n      pitchClass\n    });\n  };\n}\n\nvar index = {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  trFifths,\n  simplify,\n  enharmonic\n};\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"596c8cb1435049c8f671d81b70fd62d3","cacheData":{"env":{}}}