{"id":"../node_modules/@tonaljs/collection/dist/index.es.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\collection\\dist\\index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313565786},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\collection\\package.json","includedInParent":true,"mtime":1596312984529}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compact = compact;\nexports.permutations = permutations;\nexports.range = range;\nexports.rotate = rotate;\nexports.shuffle = shuffle;\nexports.default = void 0;\n\n// ascending range\nfunction ascR(b, n) {\n  const a = []; // tslint:disable-next-line:curly\n\n  for (; n--; a[n] = n + b);\n\n  return a;\n} // descending range\n\n\nfunction descR(b, n) {\n  const a = []; // tslint:disable-next-line:curly\n\n  for (; n--; a[n] = b - n);\n\n  return a;\n}\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\n\n\nfunction range(from, to) {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} collection\r\n * @return {Array} the rotated collection\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\n\n\nfunction rotate(times, arr) {\n  const len = arr.length;\n  const n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n/**\r\n * Return a copy of the collection with the null values removed\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\n\n\nfunction compact(arr) {\n  return arr.filter(n => n === 0 || n);\n}\n/**\r\n * Randomizes the order of the specified collection in-place, using the Fisherâ€“Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array} the collection shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\n\n\nfunction shuffle(arr, rnd = Math.random) {\n  let i;\n  let t;\n  let m = arr.length;\n\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n\n  return arr;\n}\n/**\r\n * Get all permutations of an collection\r\n *\r\n * @param {Array} collection - the collection\r\n * @return {Array<Array>} an collection with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\n\n\nfunction permutations(arr) {\n  if (arr.length === 0) {\n    return [[]];\n  }\n\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(arr.map((e, pos) => {\n      const newPerm = perm.slice();\n      newPerm.splice(pos, 0, arr[0]);\n      return newPerm;\n    }));\n  }, []);\n}\n\nvar index = {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle\n};\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"c84915b193fcfc4f53ec16c59ddd97b9","cacheData":{"env":{}}}