{"id":"../node_modules/@tonaljs/roman-numeral/dist/index.es.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\roman-numeral\\dist\\index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313565786},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\roman-numeral\\package.json","includedInParent":true,"mtime":1596312984530},{"name":"@tonaljs/core","loc":{"line":1,"column":74},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\roman-numeral\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\core\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.get = get;\nexports.names = names;\nexports.tokenize = tokenize;\nexports.default = void 0;\n\nvar _core = require(\"@tonaljs/core\");\n\nconst NoRomanNumeral = {\n  empty: true,\n  name: \"\",\n  chordType: \"\"\n};\nconst cache = {};\n/**\r\n * Get properties of a roman numeral string\r\n *\r\n * @function\r\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\r\n * @return {Object} - the roman numeral properties\r\n * @param {string} name - the roman numeral (tonic)\r\n * @param {string} type - the chord type\r\n * @param {string} num - the number (1 = I, 2 = II...)\r\n * @param {boolean} major - major or not\r\n *\r\n * @example\r\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\r\n */\n\nfunction get(src) {\n  return typeof src === \"string\" ? cache[src] || (cache[src] = parse(src)) : typeof src === \"number\" ? get(NAMES[src] || \"\") : (0, _core.isPitch)(src) ? fromPitch(src) : (0, _core.isNamed)(src) ? get(src.name) : NoRomanNumeral;\n}\n\nconst romanNumeral = (0, _core.deprecate)(\"RomanNumeral.romanNumeral\", \"RomanNumeral.get\", get);\n/**\r\n * Get roman numeral names\r\n *\r\n * @function\r\n * @param {boolean} [isMajor=true]\r\n * @return {Array<String>}\r\n *\r\n * @example\r\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\r\n */\n\nfunction names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch) {\n  return get((0, _core.altToAcc)(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\nfunction tokenize(str) {\n  return REGEX.exec(str) || [\"\", \"\", \"\", \"\"];\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src) {\n  const [name, acc, roman, chordType] = tokenize(src);\n\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = (0, _core.accToAlt)(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: (0, _core.interval)({\n      step,\n      alt,\n      dir\n    }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir\n  };\n}\n\nvar index = {\n  names,\n  get,\n  // deprecated\n  romanNumeral\n};\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"a9a55d64db03854447665e019bbd3b3c","cacheData":{"env":{}}}