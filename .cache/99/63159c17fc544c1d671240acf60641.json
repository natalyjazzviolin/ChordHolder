{"id":"../node_modules/@tonaljs/chord-detect/dist/index.es.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-detect\\dist\\index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313565786},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-detect\\package.json","includedInParent":true,"mtime":1596312984530},{"name":"@tonaljs/chord-type","loc":{"line":1,"column":20},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-detect\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-type\\dist\\index.es.js"},{"name":"@tonaljs/core","loc":{"line":2,"column":21},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-detect\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\core\\dist\\index.es.js"},{"name":"@tonaljs/pcset","loc":{"line":3,"column":22},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\chord-detect\\dist\\index.es.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\@tonaljs\\pcset\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detect = detect;\nexports.default = void 0;\n\nvar _chordType = require(\"@tonaljs/chord-type\");\n\nvar _core = require(\"@tonaljs/core\");\n\nvar _pcset = require(\"@tonaljs/pcset\");\n\nconst NotFound = {\n  weight: 0,\n  name: \"\"\n};\n\nconst namedSet = notes => {\n  const pcToName = notes.reduce((record, n) => {\n    const chroma = (0, _core.note)(n).chroma;\n\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || (0, _core.note)(n).name;\n    }\n\n    return record;\n  }, {});\n  return chroma => pcToName[chroma];\n};\n\nfunction detect(source) {\n  const notes = source.map(n => (0, _core.note)(n).pc).filter(x => x);\n\n  if (_core.note.length === 0) {\n    return [];\n  }\n\n  const found = findExactMatches(notes, 1);\n  return found.filter(chord => chord.weight).sort((a, b) => b.weight - a.weight).map(chord => chord.name);\n}\n\nfunction findExactMatches(notes, weight) {\n  const tonic = notes[0];\n  const tonicChroma = (0, _core.note)(tonic).chroma;\n  const noteName = namedSet(notes);\n  const allModes = (0, _pcset.modes)(notes, false);\n  const found = allModes.map((mode, chroma) => {\n    const chordName = (0, _chordType.get)(mode).aliases[0];\n\n    if (!chordName) {\n      return NotFound;\n    }\n\n    const baseNote = noteName(chroma);\n    const isInversion = chroma !== tonicChroma;\n\n    if (isInversion) {\n      return {\n        weight: 0.5 * weight,\n        name: `${baseNote}${chordName}/${tonic}`\n      };\n    } else {\n      return {\n        weight: 1 * weight,\n        name: `${baseNote}${chordName}`\n      };\n    }\n  });\n  return found;\n}\n\nvar index = {\n  detect\n};\nvar _default = index;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"b8e7fc642f1d9ac1d427d48f7cd58881","cacheData":{"env":{}}}