{"id":"../node_modules/tone/build/esm/core/type/Units.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\tone\\build\\esm\\core\\type\\Units.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\tone\\Tone\\core\\type\\Units.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313565786},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\tone\\package.json","includedInParent":true,"mtime":1596312949653}],"generated":{"js":""},"sourceMaps":{"js":{"version":3,"file":"Units.js","sourceRoot":"","sources":["../../../../Tone/core/type/Units.ts"],"names":[],"mappings":"","sourcesContent":["export * from \"./NoteUnits\";\n\nimport { Note } from \"./NoteUnits\";\n\n/**\n * A number representing a time in seconds\n * @category Unit\n */\nexport type Seconds = number;\n\n/**\n * A number used to measure the intensity of a sound on a logarithmic scale.\n * @category Unit\n */\nexport type Decibels = number;\n\n/**\n * A number that is between [0, 1]\n * @category Unit\n */\nexport type NormalRange = number;\n\n/**\n * A number that is between [-1, 1]\n * @category Unit\n */\nexport type AudioRange = number;\n\n/**\n * Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n * @category Unit\n */\nexport type Interval = number;\n\n/**\n * A number representing the multiplication factor applied to a signal\n * @category Unit\n */\nexport type GainFactor = number;\n\n/**\n * A number greater than or equal to 0.\n * @category Unit\n */\nexport type Positive = number;\n\n/**\n * Represents a subdivision of a measure.\n * The number represents the subdivision. \"t\" represents a triplet. A \".\" add a half.\n * e.g. \"4n\" is a quarter note, \"4t\" is a quarter note triplet, and \"4n.\" is a dotted quarter note.\n * @category Unit\n */\nexport type Subdivision = \"1m\" | \"1n\" | \"1n.\" | \"2n\" | \"2n.\" | \"2t\" | \"4n\" | \"4n.\" | \"4t\" | \"8n\" | \"8n.\" | \"8t\" |\n\"16n\" | \"16n.\" | \"16t\" | \"32n\" | \"32n.\" | \"32t\" | \"64n\" | \"64n.\" | \"64t\" | \"128n\" | \"128n.\" | \"128t\" |\n\"256n\" | \"256n.\" | \"256t\" | \"0\";\n\n/**\n * A time object has a subdivision as the keys and a number as the values.\n * @example\n * Tone.Time({\n * \t\"2n\": 1,\n * \t\"8n\": 3\n * }).valueOf(); // 2n + 8n * 3\n * @category Unit\n */\nexport type TimeObject = {\n\t[sub in Subdivision]?: number;\n};\n\n/**\n * Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n * * Numbers, which will be taken literally as the time (in seconds).\n * * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n * * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times in the form BARS:QUARTERS:SIXTEENTHS.\n * * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n * * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \"the current time plus whatever expression follows\".\n * * Object, ({\"4n\" : 3, \"8t\" : -1}). The resulting time is equal to the sum of all of the keys multiplied by the values in the object.\n * * No Argument, for methods which accept time, no argument will be interpreted as \"now\" (i.e. the currentTime).\n * @category Unit\n */\nexport type Time = string | Seconds | TimeObject | Subdivision;\n\n/**\n * Frequency can be described similar to time, except ultimately the\n * values are converted to frequency instead of seconds. A number\n * is taken literally as the value in hertz. Additionally any of the\n * Time encodings can be used. Note names in the form\n * of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n * frequency value.\n * @category Unit\n */\nexport type Frequency = Subdivision | Note | string | Hertz;\n\n/**\n *\n * @category Unit\n */\nexport type TimeSignature = number | number[];\n\n/**\n * TransportTime describes a position along the Transport's timeline. It is\n * similar to Time in that it uses all the same encodings, but TransportTime specifically\n * pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n * [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n * @category Unit\n */\nexport type TransportTime = Time;\n\n/**\n * Ticks are the basic subunit of the Transport. They are\n * the smallest unit of time that the Transport supports.\n * @category Unit\n */\nexport type Ticks = number;\n\n/**\n * Beats per minute\n * @category Unit\n */\nexport type BPM = number;\n\n/**\n * Angle between 0 and 360.\n * @category Unit\n */\nexport type Degrees = number;\n\n/**\n * Angle between 0 and 2 * PI.\n * @category Unit\n */\nexport type Radians = number;\n\n/**\n * A colon-separated representation of time in the form of\n * Bars:Beats:Sixteenths.\n * @category Unit\n */\nexport type BarsBeatsSixteenths = string;\n/**\n * Sampling is the reduction of a continuous signal to a discrete signal.\n * Audio is typically sampled 44100 times per second.\n * @category Unit\n */\nexport type Samples = number;\n\n/**\n * Hertz are a frequency representation defined as one cycle per second.\n * @category Unit\n */\nexport type Hertz = number;\n\n/**\n * A Cent is 1/100th of a semitone.\n * e.g. a value of 50 cents would be halfway between two intervals.\n * @category Unit\n */\nexport type Cents = number;\n\n/**\n * One millisecond is a thousandth of a second.\n * @category Unit\n */\nexport type Milliseconds = number;\n\n/**\n * A value which is a power of 2\n * @category Unit\n */\nexport type PowerOfTwo = number;\n\n/**\n * Map the unit name to a unit value\n */\nexport interface UnitMap {\n\tnumber: number;\n\tdecibels: Decibels;\n\tnormalRange: NormalRange;\n\taudioRange: AudioRange;\n\tgain: GainFactor;\n\tpositive: Positive;\n\ttime: Time;\n\tfrequency: Frequency;\n\ttransportTime: TransportTime;\n\tticks: Ticks;\n\tbpm: BPM;\n\tdegrees: Degrees;\n\tradians: Radians;\n\tsamples: Samples;\n\thertz: Hertz;\n\tcents: Cents;\n}\n\n/**\n * All of the unit types\n * @category Unit\n */\nexport type Unit = UnitMap[keyof UnitMap];\n\n/**\n * All of the unit names\n * @category Unit\n */\nexport type UnitName = keyof UnitMap;\n"]}},"error":null,"hash":"983f792d2e70ed8c7b882785c48f4d32","cacheData":{"env":{}}}