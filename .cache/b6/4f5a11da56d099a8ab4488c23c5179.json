{"id":"../node_modules/tone/build/esm/core/context/BaseContext.js","dependencies":[{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\tone\\build\\esm\\core\\context\\BaseContext.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\tone\\Tone\\core\\context\\BaseContext.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\package.json","includedInParent":true,"mtime":1596313565786},{"name":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\tone\\package.json","includedInParent":true,"mtime":1596312949653},{"name":"../util/Emitter","loc":{"line":1,"column":24},"parent":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\tone\\build\\esm\\core\\context\\BaseContext.js","resolved":"C:\\Users\\natal\\Documents\\chord-holder-v1\\node_modules\\tone\\build\\esm\\core\\util\\Emitter.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseContext = void 0;\n\nvar _Emitter = require(\"../util/Emitter\");\n\nclass BaseContext extends _Emitter.Emitter {\n  constructor() {\n    super(...arguments);\n    this.isOffline = false;\n  }\n\n}\n\nexports.BaseContext = BaseContext;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":10,"column":0}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":22},"generated":{"line":10,"column":6}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":10,"column":17}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":42},"generated":{"line":10,"column":26}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":6},"generated":{"line":10,"column":42}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":73},"generated":{"line":10,"column":43}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":11,"column":2}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":11,"column":13}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":11,"column":16}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":109,"column":10},"generated":{"line":13,"column":0}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":109,"column":10},"generated":{"line":13,"column":9}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":109,"column":10},"generated":{"line":13,"column":18}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":109,"column":31},"generated":{"line":13,"column":21}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":109,"column":10},"generated":{"line":13,"column":26}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":110,"column":1},"generated":{"line":14,"column":0}},{"source":"../../../../Tone/core/context/BaseContext.ts","name":null,"original":{"line":13,"column":73},"generated":{"line":16,"column":0}}],"sources":{"../../../../Tone/core/context/BaseContext.ts":"import { Seconds } from \"../type/Units\";\nimport { Emitter } from \"../util/Emitter\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\ntype BaseAudioContextSubset = import(\"./Context\").BaseAudioContextSubset;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory;\n\nexport abstract class BaseContext extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tabstract createAnalyser(): AnalyserNode\n\n\tabstract createOscillator(): OscillatorNode\n\n\tabstract createBufferSource(): AudioBufferSourceNode\n\n\tabstract createBiquadFilter(): BiquadFilterNode\n\n\tabstract createBuffer(_numberOfChannels: number, _length: number, _sampleRate: number): AudioBuffer\n\n\tabstract createChannelMerger(_numberOfInputs?: number | undefined): ChannelMergerNode\n\n\tabstract createChannelSplitter(_numberOfOutputs?: number | undefined): ChannelSplitterNode\n\n\tabstract createConstantSource(): ConstantSourceNode\n\n\tabstract createConvolver(): ConvolverNode\n\n\tabstract createDelay(_maxDelayTime?: number | undefined): DelayNode\n\n\tabstract createDynamicsCompressor(): DynamicsCompressorNode\n\n\tabstract createGain(): GainNode\n\n\tabstract createIIRFilter(_feedForward: number[] | Float32Array, _feedback: number[] | Float32Array): IIRFilterNode\n\n\tabstract createPanner(): PannerNode\n\n\tabstract createPeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave\n\n\tabstract createStereoPanner(): StereoPannerNode\n\n\tabstract createWaveShaper(): WaveShaperNode\n\n\tabstract createMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode\n\n\tabstract createMediaStreamDestination(): MediaStreamAudioDestinationNode\n\n\tabstract decodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer>\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tabstract createAudioWorkletNode(\n\t\t_name: string,\n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode\n\n\tabstract get rawContext(): AnyAudioContext\n\n\tabstract async addAudioWorkletModule(_url: string, _name: string): Promise<void>\n\n\tabstract lookAhead: number;\n\n\tabstract latencyHint: ContextLatencyHint | Seconds;\n\n\tabstract resume(): Promise<void>\n\n\tabstract setTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number\n\n\tabstract clearTimeout(_id: number): this\n\n\tabstract setInterval(_fn: (...args: any[]) => void, _interval: Seconds): number\n\n\tabstract clearInterval(_id: number): this\n\n\tabstract getConstant(_val: number): AudioBufferSourceNode\n\n\tabstract get currentTime(): Seconds\n\n\tabstract get state(): AudioContextState\n\n\tabstract get sampleRate(): number\n\n\tabstract get listener(): Listener\n\n\tabstract get transport(): Transport\n\n\tabstract get draw(): Draw\n\n\tabstract get destination(): Destination\n\n\tabstract now(): Seconds\n\n\tabstract immediate(): Seconds\n\n\treadonly isOffline: boolean = false;\n}\n"},"lineCount":null}},"error":null,"hash":"64ae3da96d3db0dbdc1f1dcc85ca07db","cacheData":{"env":{}}}