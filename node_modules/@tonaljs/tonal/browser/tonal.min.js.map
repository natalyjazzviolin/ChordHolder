{"version":3,"file":"tonal.min.js","sources":["../../core/dist/index.es.js","../../abc-notation/dist/index.es.js","../../array/dist/index.es.js","../../collection/dist/index.es.js","../../pcset/dist/index.es.js","../../chord-type/dist/index.es.js","../../chord-detect/dist/index.es.js","../../scale-type/dist/index.es.js","../../chord/dist/index.es.js","../../duration-value/dist/index.es.js","../../interval/dist/index.es.js","../../midi/dist/index.es.js","../../note/dist/index.es.js","../../roman-numeral/dist/index.es.js","../../key/dist/index.es.js","../../mode/dist/index.es.js","../../progression/dist/index.es.js","../../range/dist/index.es.js","../../scale/dist/index.es.js","../../time-signature/dist/index.es.js","../dist/index.js"],"sourcesContent":["/**\r\n * Fill a string with a repeated character\r\n *\r\n * @param character\r\n * @param repetition\r\n */\r\nconst fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nfunction deprecate(original, alternative, fn) {\r\n    return function (...args) {\r\n        // tslint:disable-next-line\r\n        console.warn(`${original} is deprecated. Use ${alternative}.`);\r\n        return fn.apply(this, args);\r\n    };\r\n}\n\nfunction isNamed(src) {\r\n    return src !== null && typeof src === \"object\" && typeof src.name === \"string\"\r\n        ? true\r\n        : false;\r\n}\n\nfunction isPitch(pitch) {\r\n    return pitch !== null &&\r\n        typeof pitch === \"object\" &&\r\n        typeof pitch.step === \"number\" &&\r\n        typeof pitch.alt === \"number\"\r\n        ? true\r\n        : false;\r\n}\r\n// The number of fifths of [C, D, E, F, G, A, B]\r\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\n// The number of octaves it span each step\r\nconst STEPS_TO_OCTS = FIFTHS.map((fifths) => Math.floor((fifths * 7) / 12));\r\nfunction encode(pitch) {\r\n    const { step, alt, oct, dir = 1 } = pitch;\r\n    const f = FIFTHS[step] + 7 * alt;\r\n    if (oct === undefined) {\r\n        return [dir * f];\r\n    }\r\n    const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\r\n    return [dir * f, dir * o];\r\n}\r\n// We need to get the steps from fifths\r\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\r\n// We add 1 to fifths to avoid negative numbers, so:\r\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\r\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction decode(coord) {\r\n    const [f, o, dir] = coord;\r\n    const step = FIFTHS_TO_STEPS[unaltered(f)];\r\n    const alt = Math.floor((f + 1) / 7);\r\n    if (o === undefined) {\r\n        return { step, alt, dir };\r\n    }\r\n    const oct = o + 4 * alt + STEPS_TO_OCTS[step];\r\n    return { step, alt, oct, dir };\r\n}\r\n// Return the number of fifths as if it were unaltered\r\nfunction unaltered(f) {\r\n    const i = (f + 1) % 7;\r\n    return i < 0 ? 7 + i : i;\r\n}\n\nconst NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\r\nconst cache = new Map();\r\nconst stepToLetter = (step) => \"CDEFGAB\".charAt(step);\r\nconst altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\r\nconst accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\r\n/**\r\n * Given a note literal (a note name or a note object), returns the Note object\r\n * @example\r\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nfunction note(src) {\r\n    const cached = cache.get(src);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const value = typeof src === \"string\"\r\n        ? parse(src)\r\n        : isPitch(src)\r\n            ? note(pitchName(src))\r\n            : isNamed(src)\r\n                ? note(src.name)\r\n                : NoNote;\r\n    cache.set(src, value);\r\n    return value;\r\n}\r\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeNote(str) {\r\n    const m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToNote(noteCoord) {\r\n    return note(decode(noteCoord));\r\n}\r\nconst mod = (n, m) => ((n % m) + m) % m;\r\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse(noteName) {\r\n    const tokens = tokenizeNote(noteName);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\") {\r\n        return NoNote;\r\n    }\r\n    const letter = tokens[0];\r\n    const acc = tokens[1];\r\n    const octStr = tokens[2];\r\n    const step = (letter.charCodeAt(0) + 3) % 7;\r\n    const alt = accToAlt(acc);\r\n    const oct = octStr.length ? +octStr : undefined;\r\n    const coord = encode({ step, alt, oct });\r\n    const name = letter + acc + octStr;\r\n    const pc = letter + acc;\r\n    const chroma = (SEMI[step] + alt + 120) % 12;\r\n    const height = oct === undefined\r\n        ? mod(SEMI[step] + alt, 12) - 12 * 99\r\n        : SEMI[step] + alt + 12 * (oct + 1);\r\n    const midi = height >= 0 && height <= 127 ? height : null;\r\n    const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\r\n    return {\r\n        empty: false,\r\n        acc,\r\n        alt,\r\n        chroma,\r\n        coord,\r\n        freq,\r\n        height,\r\n        letter,\r\n        midi,\r\n        name,\r\n        oct,\r\n        pc,\r\n        step,\r\n    };\r\n}\r\nfunction pitchName(props) {\r\n    const { step, alt, oct } = props;\r\n    const letter = stepToLetter(step);\r\n    if (!letter) {\r\n        return \"\";\r\n    }\r\n    const pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n}\n\nconst NoInterval = { empty: true, name: \"\", acc: \"\" };\r\n// shorthand tonal notation (with quality after number)\r\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\n// standard shorthand notation (with quality before number)\r\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nconst REGEX$1 = new RegExp(\"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\");\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeInterval(str) {\r\n    const m = REGEX$1.exec(`${str}`);\r\n    if (m === null) {\r\n        return [\"\", \"\"];\r\n    }\r\n    return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nconst cache$1 = {};\r\n/**\r\n * Get interval properties. It returns an object with:\r\n *\r\n * - name: the interval name\r\n * - num: the interval number\r\n * - type: 'perfectable' or 'majorable'\r\n * - q: the interval quality (d, m, M, A)\r\n * - dir: interval direction (1 ascending, -1 descending)\r\n * - simple: the simplified number\r\n * - semitones: the size in semitones\r\n * - chroma: the interval chroma\r\n *\r\n * @param {string} interval - the interval name\r\n * @return {Object} the interval properties\r\n *\r\n * @example\r\n * import { interval } from '@tonaljs/core'\r\n * interval('P5').semitones // => 7\r\n * interval('m3').type // => 'majorable'\r\n */\r\nfunction interval(src) {\r\n    return typeof src === \"string\"\r\n        ? cache$1[src] || (cache$1[src] = parse$1(src))\r\n        : isPitch(src)\r\n            ? interval(pitchName$1(src))\r\n            : isNamed(src)\r\n                ? interval(src.name)\r\n                : NoInterval;\r\n}\r\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nconst TYPES = \"PMMPPMM\";\r\nfunction parse$1(str) {\r\n    const tokens = tokenizeInterval(str);\r\n    if (tokens[0] === \"\") {\r\n        return NoInterval;\r\n    }\r\n    const num = +tokens[0];\r\n    const q = tokens[1];\r\n    const step = (Math.abs(num) - 1) % 7;\r\n    const t = TYPES[step];\r\n    if (t === \"M\" && q === \"P\") {\r\n        return NoInterval;\r\n    }\r\n    const type = t === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = \"\" + num + q;\r\n    const dir = num < 0 ? -1 : 1;\r\n    const simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n    const alt = qToAlt(type, q);\r\n    const oct = Math.floor((Math.abs(num) - 1) / 7);\r\n    const semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n    const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\r\n    const coord = encode({ step, alt, oct, dir });\r\n    return {\r\n        empty: false,\r\n        name,\r\n        num,\r\n        q,\r\n        step,\r\n        alt,\r\n        dir,\r\n        type,\r\n        simple,\r\n        semitones,\r\n        chroma,\r\n        coord,\r\n        oct,\r\n    };\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToInterval(coord) {\r\n    const [f, o = 0] = coord;\r\n    const isDescending = f * 7 + o * 12 < 0;\r\n    const ivl = isDescending ? [-f, -o, -1] : [f, o, 1];\r\n    return interval(decode(ivl));\r\n}\r\nfunction qToAlt(type, q) {\r\n    return (q === \"M\" && type === \"majorable\") ||\r\n        (q === \"P\" && type === \"perfectable\")\r\n        ? 0\r\n        : q === \"m\" && type === \"majorable\"\r\n            ? -1\r\n            : /^A+$/.test(q)\r\n                ? q.length\r\n                : /^d+$/.test(q)\r\n                    ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\r\n                    : 0;\r\n}\r\n// return the interval name of a pitch\r\nfunction pitchName$1(props) {\r\n    const { step, alt, oct = 0, dir } = props;\r\n    if (!dir) {\r\n        return \"\";\r\n    }\r\n    const num = step + 1 + 7 * oct;\r\n    const d = dir < 0 ? \"-\" : \"\";\r\n    const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = d + num + altToQ(type, alt);\r\n    return name;\r\n}\r\nfunction altToQ(type, alt) {\r\n    if (alt === 0) {\r\n        return type === \"majorable\" ? \"M\" : \"P\";\r\n    }\r\n    else if (alt === -1 && type === \"majorable\") {\r\n        return \"m\";\r\n    }\r\n    else if (alt > 0) {\r\n        return fillStr(\"A\", alt);\r\n    }\r\n    else {\r\n        return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1);\r\n    }\r\n}\n\n/**\r\n * Transpose a note by an interval.\r\n *\r\n * @param {string} note - the note or note name\r\n * @param {string} interval - the interval or interval name\r\n * @return {string} the transposed note name or empty string if not valid notes\r\n * @example\r\n * import { tranpose } from \"@tonaljs/core\"\r\n * transpose(\"d3\", \"3M\") // => \"F#3\"\r\n * transpose(\"D\", \"3M\") // => \"F#\"\r\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\r\n */\r\nfunction transpose(noteName, intervalName) {\r\n    const note$1 = note(noteName);\r\n    const interval$1 = interval(intervalName);\r\n    if (note$1.empty || interval$1.empty) {\r\n        return \"\";\r\n    }\r\n    const noteCoord = note$1.coord;\r\n    const intervalCoord = interval$1.coord;\r\n    const tr = noteCoord.length === 1\r\n        ? [noteCoord[0] + intervalCoord[0]]\r\n        : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\r\n    return coordToNote(tr).name;\r\n}\r\n/**\r\n * Find the interval distance between two notes or coord classes.\r\n *\r\n * To find distance between coord classes, both notes must be coord classes and\r\n * the interval is always ascending\r\n *\r\n * @param {Note|string} from - the note or note name to calculate distance from\r\n * @param {Note|string} to - the note or note name to calculate distance to\r\n * @return {string} the interval name or empty string if not valid notes\r\n *\r\n */\r\nfunction distance(fromNote, toNote) {\r\n    const from = note(fromNote);\r\n    const to = note(toNote);\r\n    if (from.empty || to.empty) {\r\n        return \"\";\r\n    }\r\n    const fcoord = from.coord;\r\n    const tcoord = to.coord;\r\n    const fifths = tcoord[0] - fcoord[0];\r\n    const octs = fcoord.length === 2 && tcoord.length === 2\r\n        ? tcoord[1] - fcoord[1]\r\n        : -Math.floor((fifths * 7) / 12);\r\n    return coordToInterval([fifths, octs]).name;\r\n}\n\nexport { accToAlt, altToAcc, coordToInterval, coordToNote, decode, deprecate, distance, encode, fillStr, interval, isNamed, isPitch, note, stepToLetter, tokenizeInterval, tokenizeNote, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose as transpose$1, distance as distance$1 } from '@tonaljs/core';\n\nconst fillStr = (character, times) => Array(times + 1).join(character);\r\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\r\nfunction tokenize(str) {\r\n    const m = REGEX.exec(str);\r\n    if (!m) {\r\n        return [\"\", \"\", \"\"];\r\n    }\r\n    return [m[1], m[2], m[3]];\r\n}\r\n/**\r\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\r\n *\r\n * @example\r\n * abcToScientificNotation(\"c\") // => \"C5\"\r\n */\r\nfunction abcToScientificNotation(str) {\r\n    const [acc, letter, oct] = tokenize(str);\r\n    if (letter === \"\") {\r\n        return \"\";\r\n    }\r\n    let o = 4;\r\n    for (let i = 0; i < oct.length; i++) {\r\n        o += oct.charAt(i) === \",\" ? -1 : 1;\r\n    }\r\n    const a = acc[0] === \"_\"\r\n        ? acc.replace(/_/g, \"b\")\r\n        : acc[0] === \"^\"\r\n            ? acc.replace(/\\^/g, \"#\")\r\n            : \"\";\r\n    return letter.charCodeAt(0) > 96\r\n        ? letter.toUpperCase() + a + (o + 1)\r\n        : letter + a + o;\r\n}\r\n/**\r\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\r\n *\r\n * @example\r\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\r\n */\r\nfunction scientificToAbcNotation(str) {\r\n    const n = note(str);\r\n    if (n.empty || !n.oct) {\r\n        return \"\";\r\n    }\r\n    const { letter, acc, oct } = n;\r\n    const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\r\n    const l = oct > 4 ? letter.toLowerCase() : letter;\r\n    const o = oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\r\n    return a + l + o;\r\n}\r\nfunction transpose(note, interval) {\r\n    return scientificToAbcNotation(transpose$1(abcToScientificNotation(note), interval));\r\n}\r\nfunction distance(from, to) {\r\n    return distance$1(abcToScientificNotation(from), abcToScientificNotation(to));\r\n}\r\nvar index = {\r\n    abcToScientificNotation,\r\n    scientificToAbcNotation,\r\n    tokenize,\r\n    transpose,\r\n    distance,\r\n};\n\nexport default index;\nexport { abcToScientificNotation, distance, scientificToAbcNotation, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { note } from '@tonaljs/core';\n\n// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} array\r\n * @return {Array} the rotated array\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the array with the null values removed\r\n * @function\r\n * @param {Array} array\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Sort an array of notes in ascending order. Pitch classes are listed\r\n * before notes. Any string that is not a note is removed.\r\n *\r\n * @param {string[]} notes\r\n * @return {string[]} sorted array of notes\r\n *\r\n * @example\r\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\r\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\r\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\r\n * // => ['C', 'F', 'G', 'A', 'B']\r\n */\r\nfunction sortedNoteNames(notes) {\r\n    const valid = notes.map((n) => note(n)).filter((n) => !n.empty);\r\n    return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\r\n}\r\n/**\r\n * Get sorted notes with duplicates removed. Pitch classes are listed\r\n * before notes.\r\n *\r\n * @function\r\n * @param {string[]} array\r\n * @return {string[]} unique sorted notes\r\n *\r\n * @example\r\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\r\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\r\n */\r\nfunction sortedUniqNoteNames(arr) {\r\n    return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} array\r\n * @return {Array} the array shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an array\r\n *\r\n * @param {Array} array - the array\r\n * @return {Array<Array>} an array with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\n\nexport { compact, permutations, range, rotate, shuffle, sortedNoteNames, sortedUniqNoteNames };\n//# sourceMappingURL=index.es.js.map\n","// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} collection\r\n * @return {Array} the rotated collection\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the collection with the null values removed\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array} the collection shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an collection\r\n *\r\n * @param {Array} collection - the collection\r\n * @return {Array<Array>} an collection with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\r\nvar index = {\r\n    compact,\r\n    permutations,\r\n    range,\r\n    rotate,\r\n    shuffle,\r\n};\n\nexport default index;\nexport { compact, permutations, range, rotate, shuffle };\n//# sourceMappingURL=index.es.js.map\n","import { range, compact, rotate } from '@tonaljs/collection';\nimport { deprecate, note, interval } from '@tonaljs/core';\n\nconst EmptyPcset = {\r\n    empty: true,\r\n    name: \"\",\r\n    setNum: 0,\r\n    chroma: \"000000000000\",\r\n    normalized: \"000000000000\",\r\n    intervals: [],\r\n};\r\n// UTILITIES\r\nconst setNumToChroma = (num) => Number(num).toString(2);\r\nconst chromaToNumber = (chroma) => parseInt(chroma, 2);\r\nconst REGEX = /^[01]{12}$/;\r\nfunction isChroma(set) {\r\n    return REGEX.test(set);\r\n}\r\nconst isPcsetNum = (set) => typeof set === \"number\" && set >= 0 && set <= 4095;\r\nconst isPcset = (set) => set && isChroma(set.chroma);\r\nconst cache = { [EmptyPcset.chroma]: EmptyPcset };\r\n/**\r\n * Get the pitch class set of a collection of notes or set number or chroma\r\n */\r\nfunction get(src) {\r\n    const chroma = isChroma(src)\r\n        ? src\r\n        : isPcsetNum(src)\r\n            ? setNumToChroma(src)\r\n            : Array.isArray(src)\r\n                ? listToChroma(src)\r\n                : isPcset(src)\r\n                    ? src.chroma\r\n                    : EmptyPcset.chroma;\r\n    return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\r\n}\r\n/**\r\n * Use Pcset.properties\r\n * @function\r\n * @deprecated\r\n */\r\nconst pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\r\n/**\r\n * Get pitch class set chroma\r\n * @function\r\n * @example\r\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\r\n */\r\nconst chroma = (set) => get(set).chroma;\r\n/**\r\n * Get intervals (from C) of a set\r\n * @function\r\n * @example\r\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\r\n */\r\nconst intervals = (set) => get(set).intervals;\r\n/**\r\n * Get pitch class set number\r\n * @function\r\n * @example\r\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\r\n */\r\nconst num = (set) => get(set).setNum;\r\nconst IVLS = [\r\n    \"1P\",\r\n    \"2m\",\r\n    \"2M\",\r\n    \"3m\",\r\n    \"3M\",\r\n    \"4P\",\r\n    \"5d\",\r\n    \"5P\",\r\n    \"6m\",\r\n    \"6M\",\r\n    \"7m\",\r\n    \"7M\",\r\n];\r\n/**\r\n * @private\r\n * Get the intervals of a pcset *starting from C*\r\n * @param {Set} set - the pitch class set\r\n * @return {IntervalName[]} an array of interval names or an empty array\r\n * if not a valid pitch class set\r\n */\r\nfunction chromaToIntervals(chroma) {\r\n    const intervals = [];\r\n    for (let i = 0; i < 12; i++) {\r\n        // tslint:disable-next-line:curly\r\n        if (chroma.charAt(i) === \"1\")\r\n            intervals.push(IVLS[i]);\r\n    }\r\n    return intervals;\r\n}\r\n/**\r\n * Get a list of all possible pitch class sets (all possible chromas) *having\r\n * C as root*. There are 2048 different chromas. If you want them with another\r\n * note you have to transpose it\r\n *\r\n * @see http://allthescales.org/\r\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\r\n */\r\nfunction chromas() {\r\n    return range(2048, 4095).map(setNumToChroma);\r\n}\r\n/**\r\n * Given a a list of notes or a pcset chroma, produce the rotations\r\n * of the chroma discarding the ones that starts with \"0\"\r\n *\r\n * This is used, for example, to get all the modes of a scale.\r\n *\r\n * @param {Array|string} set - the list of notes or pitchChr of the set\r\n * @param {boolean} normalize - (Optional, true by default) remove all\r\n * the rotations that starts with \"0\"\r\n * @return {Array<string>} an array with all the modes of the chroma\r\n *\r\n * @example\r\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\r\n */\r\nfunction modes(set, normalize = true) {\r\n    const pcs = get(set);\r\n    const binary = pcs.chroma.split(\"\");\r\n    return compact(binary.map((_, i) => {\r\n        const r = rotate(i, binary);\r\n        return normalize && r[0] === \"0\" ? null : r.join(\"\");\r\n    }));\r\n}\r\n/**\r\n * Test if two pitch class sets are numentical\r\n *\r\n * @param {Array|string} set1 - one of the pitch class sets\r\n * @param {Array|string} set2 - the other pitch class set\r\n * @return {boolean} true if they are equal\r\n * @example\r\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\r\n */\r\nfunction isEqual(s1, s2) {\r\n    return get(s1).setNum === get(s2).setNum;\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * subset of a given set\r\n *\r\n * The function is curryfied.\r\n *\r\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\r\n * list of notes)\r\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\r\n * to test against (chroma or list of notes)\r\n * @example\r\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\r\n * inCMajor([\"e6\", \"c4\"]) // => true\r\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\r\n */\r\nfunction isSubsetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o & s) === o;\r\n    };\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * superset of a given set (it contains all notes and at least one more)\r\n *\r\n * @param {Set} set - an array of notes or a chroma set string to test against\r\n * @return {(subset: Set): boolean} a function that given a set\r\n * returns true if is a subset of the first one\r\n * @example\r\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\r\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\r\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\r\n */\r\nfunction isSupersetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o | s) === o;\r\n    };\r\n}\r\n/**\r\n * Test if a given pitch class set includes a note\r\n *\r\n * @param {Array<string>} set - the base set to test against\r\n * @param {string} note - the note to test\r\n * @return {boolean} true if the note is included in the pcset\r\n *\r\n * Can be partially applied\r\n *\r\n * @example\r\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\r\n * isNoteInCMajor('C4') // => true\r\n * isNoteInCMajor('C#4') // => false\r\n */\r\nfunction isNoteIncludedIn(set) {\r\n    const s = get(set);\r\n    return (noteName) => {\r\n        const n = note(noteName);\r\n        return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\r\n    };\r\n}\r\n/** @deprecated use: isNoteIncludedIn */\r\nconst includes = isNoteIncludedIn;\r\n/**\r\n * Filter a list with a pitch class set\r\n *\r\n * @param {Array|string} set - the pitch class set notes\r\n * @param {Array|string} notes - the note list to be filtered\r\n * @return {Array} the filtered notes\r\n *\r\n * @example\r\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\r\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\r\n */\r\nfunction filter(set) {\r\n    const isIncluded = isNoteIncludedIn(set);\r\n    return (notes) => {\r\n        return notes.filter(isIncluded);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    chroma,\r\n    num,\r\n    intervals,\r\n    chromas,\r\n    isSupersetOf,\r\n    isSubsetOf,\r\n    isNoteIncludedIn,\r\n    isEqual,\r\n    filter,\r\n    modes,\r\n    // deprecated\r\n    pcset,\r\n};\r\n//// PRIVATE ////\r\nfunction chromaRotations(chroma) {\r\n    const binary = chroma.split(\"\");\r\n    return binary.map((_, i) => rotate(i, binary).join(\"\"));\r\n}\r\nfunction chromaToPcset(chroma) {\r\n    const setNum = chromaToNumber(chroma);\r\n    const normalizedNum = chromaRotations(chroma)\r\n        .map(chromaToNumber)\r\n        .filter((n) => n >= 2048)\r\n        .sort()[0];\r\n    const normalized = setNumToChroma(normalizedNum);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        name: \"\",\r\n        setNum,\r\n        chroma,\r\n        normalized,\r\n        intervals,\r\n    };\r\n}\r\nfunction listToChroma(set) {\r\n    if (set.length === 0) {\r\n        return EmptyPcset.chroma;\r\n    }\r\n    let pitch;\r\n    const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < set.length; i++) {\r\n        pitch = note(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (pitch.empty)\r\n            pitch = interval(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (!pitch.empty)\r\n            binary[pitch.chroma] = 1;\r\n    }\r\n    return binary.join(\"\");\r\n}\n\nexport default index;\nexport { EmptyPcset, chromaToIntervals, chromas, filter, get, includes, isEqual, isNoteIncludedIn, isSubsetOf, isSupersetOf, modes, pcset };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { get as get$1, EmptyPcset } from '@tonaljs/pcset';\n\n/**\r\n * @private\r\n * Chord List\r\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\r\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\r\n */\r\nconst CHORDS = [\r\n    // ==Major==\r\n    [\"1P 3M 5P\", \"major\", \"M ^ \"],\r\n    [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\r\n    [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\r\n    [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\r\n    [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\r\n    [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69 M69\"],\r\n    [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\r\n    [\r\n        \"1P 3M 5P 7M 11A\",\r\n        \"major seventh sharp eleventh\",\r\n        \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\r\n    ],\r\n    // ==Minor==\r\n    // '''Normal'''\r\n    [\"1P 3m 5P\", \"minor\", \"m min -\"],\r\n    [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\r\n    [\r\n        \"1P 3m 5P 7M\",\r\n        \"minor/major seventh\",\r\n        \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7\",\r\n    ],\r\n    [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\r\n    [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\r\n    [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\r\n    [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\r\n    [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\r\n    // '''Diminished'''\r\n    [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\r\n    [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\r\n    [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\r\n    // ==Dominant/Seventh==\r\n    // '''Normal'''\r\n    [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\r\n    [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\r\n    [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\r\n    [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\r\n    // '''Altered'''\r\n    [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\r\n    [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\r\n    [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\r\n    // '''Suspended'''\r\n    [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\r\n    [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\r\n    [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\r\n    [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\r\n    [\r\n        \"1P 4P 5P 7m 9m\",\r\n        \"suspended fourth flat ninth\",\r\n        \"b9sus phryg 7b9sus 7b9sus4\",\r\n    ],\r\n    // ==Other==\r\n    [\"1P 5P\", \"fifth\", \"5\"],\r\n    [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\r\n    [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\r\n    [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\r\n    [\r\n        \"1P 3M 5P 7M 9M 11A\",\r\n        \"major sharp eleventh (lydian)\",\r\n        \"maj9#11 Δ9#11 ^9#11\",\r\n    ],\r\n    // ==Legacy==\r\n    [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\r\n    [\"1P 3M 13m\", \"\", \"Mb6\"],\r\n    [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\r\n    [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\r\n    [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\r\n    [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\r\n    [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\r\n    [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\r\n    [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\r\n    [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\r\n    [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\r\n    [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\r\n    [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\r\n    [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\r\n    [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\r\n    [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\r\n    [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\r\n    [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\r\n    [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\r\n    [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\r\n    [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\r\n    [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\r\n    [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\r\n    [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\r\n    [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\r\n    [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\r\n    [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\r\n    [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\r\n    [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\r\n    [\"1P 3M 5d\", \"\", \"Mb5\"],\r\n    [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\r\n    [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\r\n    [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\r\n    [\"1P 3M 5d 7m\", \"\", \"7b5\"],\r\n    [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\r\n    [\"1P 3M 7m\", \"\", \"7no5\"],\r\n    [\"1P 3M 7m 13m\", \"\", \"7b13\"],\r\n    [\"1P 3M 7m 9M\", \"\", \"9no5\"],\r\n    [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\r\n    [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\r\n    [\"1P 3m 4P 5P\", \"\", \"madd4\"],\r\n    [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\r\n    [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\r\n    [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\r\n    [\"1P 3m 5P 9M\", \"\", \"madd9\"],\r\n    [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\r\n    [\"1P 3m 5d 7M\", \"\", \"oM7\"],\r\n    [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\r\n    [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\r\n    [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\r\n    [\"1P 3m 6m 7m 9M 11P\", \"\", \"m11A\"],\r\n    [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\r\n    [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\r\n    [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\r\n    [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\r\n    [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\r\n    [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\r\n    [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\r\n    [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\r\n    [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\r\n    [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\r\n    [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\r\n    [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\r\n];\n\nconst NoChordType = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    quality: \"Unknown\",\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\n/**\r\n * Given a chord name or chroma, return the chord properties\r\n * @param {string} source - chord name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/chord-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoChordType;\r\n}\r\nconst chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\r\n/**\r\n * Get all chord (long) names\r\n */\r\nfunction names() {\r\n    return dictionary.map((chord) => chord.name).filter((x) => x);\r\n}\r\n/**\r\n * Get all chord symbols\r\n */\r\nfunction symbols() {\r\n    return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\r\n}\r\n/**\r\n * Keys used to reference chord types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Return a list of all chord types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a chord to the dictionary.\r\n * @param intervals\r\n * @param aliases\r\n * @param [fullName]\r\n */\r\nfunction add(intervals, aliases, fullName) {\r\n    const quality = getQuality(intervals);\r\n    const chord = {\r\n        ...get$1(intervals),\r\n        name: fullName || \"\",\r\n        quality,\r\n        intervals,\r\n        aliases,\r\n    };\r\n    dictionary.push(chord);\r\n    if (chord.name) {\r\n        index[chord.name] = chord;\r\n    }\r\n    index[chord.setNum] = chord;\r\n    index[chord.chroma] = chord;\r\n    chord.aliases.forEach((alias) => addAlias(chord, alias));\r\n}\r\nfunction addAlias(chord, alias) {\r\n    index[alias] = chord;\r\n}\r\nfunction getQuality(intervals) {\r\n    const has = (interval) => intervals.indexOf(interval) !== -1;\r\n    return has(\"5A\")\r\n        ? \"Augmented\"\r\n        : has(\"3M\")\r\n            ? \"Major\"\r\n            : has(\"5d\")\r\n                ? \"Diminished\"\r\n                : has(\"3m\")\r\n                    ? \"Minor\"\r\n                    : \"Unknown\";\r\n}\r\nCHORDS.forEach(([ivls, fullName, names]) => add(ivls.split(\" \"), names.split(\" \"), fullName));\r\ndictionary.sort((a, b) => a.setNum - b.setNum);\r\nvar index$1 = {\r\n    names,\r\n    symbols,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    chordType,\r\n};\n\nexport default index$1;\nexport { add, addAlias, all, chordType, entries, get, keys, names, removeAll, symbols };\n//# sourceMappingURL=index.es.js.map\n","import { get } from '@tonaljs/chord-type';\nimport { note } from '@tonaljs/core';\nimport { modes } from '@tonaljs/pcset';\n\nconst NotFound = { weight: 0, name: \"\" };\r\nconst namedSet = (notes) => {\r\n    const pcToName = notes.reduce((record, n) => {\r\n        const chroma = note(n).chroma;\r\n        if (chroma !== undefined) {\r\n            record[chroma] = record[chroma] || note(n).name;\r\n        }\r\n        return record;\r\n    }, {});\r\n    return (chroma) => pcToName[chroma];\r\n};\r\nfunction detect(source) {\r\n    const notes = source.map((n) => note(n).pc).filter((x) => x);\r\n    if (note.length === 0) {\r\n        return [];\r\n    }\r\n    const found = findExactMatches(notes, 1);\r\n    return found\r\n        .filter((chord) => chord.weight)\r\n        .sort((a, b) => b.weight - a.weight)\r\n        .map((chord) => chord.name);\r\n}\r\nfunction findExactMatches(notes, weight) {\r\n    const tonic = notes[0];\r\n    const tonicChroma = note(tonic).chroma;\r\n    const noteName = namedSet(notes);\r\n    const allModes = modes(notes, false);\r\n    const found = allModes.map((mode, chroma) => {\r\n        const chordName = get(mode).aliases[0];\r\n        if (!chordName) {\r\n            return NotFound;\r\n        }\r\n        const baseNote = noteName(chroma);\r\n        const isInversion = chroma !== tonicChroma;\r\n        if (isInversion) {\r\n            return { weight: 0.5 * weight, name: `${baseNote}${chordName}/${tonic}` };\r\n        }\r\n        else {\r\n            return { weight: 1 * weight, name: `${baseNote}${chordName}` };\r\n        }\r\n    });\r\n    return found;\r\n}\r\nvar index = { detect };\n\nexport default index;\nexport { detect };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n// SCALES\r\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\r\nconst SCALES = [\r\n    // 5-note scales\r\n    [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\r\n    [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\r\n    [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\r\n    [\"1P 2M 4P 5P 6M\", \"ritusen\"],\r\n    [\"1P 2M 4P 5P 7m\", \"egyptian\"],\r\n    [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\r\n    [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\r\n    [\"1P 2m 3m 5P 6m\", \"pelog\"],\r\n    [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\r\n    [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\r\n    [\"1P 2m 4P 5d 7m\", \"iwato\"],\r\n    [\"1P 2m 4P 5P 7m\", \"in-sen\"],\r\n    [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\r\n    [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\r\n    [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\r\n    [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\r\n    [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\r\n    [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\r\n    [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\r\n    [\"1P 2m 3M 5P 6M\", \"scriabin\"],\r\n    [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\r\n    [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\r\n    [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\r\n    [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\r\n    [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\r\n    // 6-note scales\r\n    [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\r\n    [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\r\n    [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\r\n    [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\r\n    [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\r\n    [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\r\n    [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\r\n    [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\r\n    [\"1P 2M 3M 4A 5A 7m\", \"whole tone\", \"messiaen's mode #1\"],\r\n    [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\r\n    [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\r\n    // 7-note scales\r\n    [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\r\n    [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\r\n    [\r\n        \"1P 2m 3m 4d 5d 6m 7m\",\r\n        \"altered\",\r\n        \"super locrian\",\r\n        \"diminished whole tone\",\r\n        \"pomeroy\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\r\n    [\r\n        \"1P 2M 3M 4P 5P 6m 7m\",\r\n        \"mixolydian b6\",\r\n        \"melodic minor fifth mode\",\r\n        \"hindu\",\r\n    ],\r\n    [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\r\n    [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\r\n    [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\r\n    [\r\n        \"1P 2m 3m 4P 5P 6M 7m\",\r\n        \"dorian b2\",\r\n        \"phrygian #6\",\r\n        \"melodic minor second mode\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\r\n    [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\r\n    [\r\n        \"1P 2m 3m 4d 5d 6m 7d\",\r\n        \"ultralocrian\",\r\n        \"superlocrian bb7\",\r\n        \"·superlocrian diminished\",\r\n    ],\r\n    [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\r\n    [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\r\n    [\"1P 2M 3m 5d 5P 6M 7m\", \"romanian minor\"],\r\n    [\"1P 2M 3m 4A 5P 6M 7m\", \"dorian #4\"],\r\n    [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\r\n    [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\r\n    [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\r\n    [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"],\r\n    [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\r\n    [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\r\n    [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\r\n    [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\r\n    [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\r\n    [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\r\n    [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\r\n    [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\r\n    [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\r\n    [\r\n        \"1P 2M 3M 4P 5A 6M 7M\",\r\n        \"major augmented\",\r\n        \"major #5\",\r\n        \"ionian augmented\",\r\n        \"ionian #5\",\r\n    ],\r\n    [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\r\n    // 8-note scales\r\n    [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\r\n    [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\r\n    [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\r\n    [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\r\n    [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\r\n    [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\r\n    [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\r\n    [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\r\n    [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\r\n    [\r\n        \"1P 2m 3m 3M 4A 5P 6M 7m\",\r\n        \"half-whole diminished\",\r\n        \"dominant diminished\",\r\n        \"messiaen's mode #2\",\r\n    ],\r\n    [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\r\n    [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\r\n    // 9-note scales\r\n    [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\r\n    [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\r\n    // 10-note scales\r\n    [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\r\n    // 12-note scales\r\n    [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\r\n];\n\nconst NoScaleType = {\r\n    ...EmptyPcset,\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\nfunction names() {\r\n    return dictionary.map((scale) => scale.name);\r\n}\r\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n *\r\n * @param {string} type - scale name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/scale-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoScaleType;\r\n}\r\nconst scaleType = deprecate(\"ScaleDictionary.scaleType\", \"ScaleType.get\", get);\r\n/**\r\n * Return a list of all scale types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ScaleDictionary.entries\", \"ScaleType.all\", all);\r\n/**\r\n * Keys used to reference scale types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a scale into dictionary\r\n * @param intervals\r\n * @param name\r\n * @param aliases\r\n */\r\nfunction add(intervals, name, aliases = []) {\r\n    const scale = { ...get$1(intervals), name, intervals, aliases };\r\n    dictionary.push(scale);\r\n    index[scale.name] = scale;\r\n    index[scale.setNum] = scale;\r\n    index[scale.chroma] = scale;\r\n    scale.aliases.forEach((alias) => addAlias(scale, alias));\r\n    return scale;\r\n}\r\nfunction addAlias(scale, alias) {\r\n    index[alias] = scale;\r\n}\r\nSCALES.forEach(([ivls, name, ...aliases]) => add(ivls.split(\" \"), name, aliases));\r\nvar index$1 = {\r\n    names,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    scaleType,\r\n};\n\nexport default index$1;\nexport { NoScaleType, add, addAlias, all, entries, get, keys, names, removeAll, scaleType };\n//# sourceMappingURL=index.es.js.map\n","import { detect } from '@tonaljs/chord-detect';\nexport { detect } from '@tonaljs/chord-detect';\nimport { get as get$1, all as all$1 } from '@tonaljs/chord-type';\nimport { tokenizeNote, note, distance, transpose as transpose$1, deprecate } from '@tonaljs/core';\nimport { isSupersetOf, isSubsetOf } from '@tonaljs/pcset';\nimport { all } from '@tonaljs/scale-type';\n\nconst NoChord = {\r\n    empty: true,\r\n    name: \"\",\r\n    symbol: \"\",\r\n    root: \"\",\r\n    rootDegree: 0,\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    quality: \"Unknown\",\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\r\n// (see https://github.com/danigb/tonal/issues/55)\r\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\r\n/**\r\n * Tokenize a chord name. It returns an array with the tonic and chord type\r\n * If not tonic is found, all the name is considered the chord name.\r\n *\r\n * This function does NOT check if the chord type exists or not. It only tries\r\n * to split the tonic and chord type.\r\n *\r\n * @function\r\n * @param {string} name - the chord name\r\n * @return {Array} an array with [tonic, type]\r\n * @example\r\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\r\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\r\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\r\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\r\n */\r\nfunction tokenize(name) {\r\n    const [letter, acc, oct, type] = tokenizeNote(name);\r\n    if (letter === \"\") {\r\n        return [\"\", name];\r\n    }\r\n    // aug is augmented (see https://github.com/danigb/tonal/issues/55)\r\n    if (letter === \"A\" && type === \"ug\") {\r\n        return [\"\", \"aug\"];\r\n    }\r\n    // see: https://github.com/tonaljs/tonal/issues/70\r\n    if (!type && (oct === \"4\" || oct === \"5\")) {\r\n        return [letter + acc, oct];\r\n    }\r\n    if (NUM_TYPES.test(oct)) {\r\n        return [letter + acc, oct + type];\r\n    }\r\n    else {\r\n        return [letter + acc + oct, type];\r\n    }\r\n}\r\n/**\r\n * Get a Chord from a chord name.\r\n */\r\nfunction get(src) {\r\n    if (src === \"\") {\r\n        return NoChord;\r\n    }\r\n    if (Array.isArray(src) && src.length === 2) {\r\n        return getChord(src[1], src[0]);\r\n    }\r\n    else {\r\n        const [tonic, type] = tokenize(src);\r\n        const chord = getChord(type, tonic);\r\n        return chord.empty ? getChord(src) : chord;\r\n    }\r\n}\r\n/**\r\n * Get chord properties\r\n *\r\n * @param typeName - the chord type name\r\n * @param [tonic] - Optional tonic\r\n * @param [root]  - Optional root (requires a tonic)\r\n */\r\nfunction getChord(typeName, optionalTonic, optionalRoot) {\r\n    const type = get$1(typeName);\r\n    const tonic = note(optionalTonic || \"\");\r\n    const root = note(optionalRoot || \"\");\r\n    if (type.empty ||\r\n        (optionalTonic && tonic.empty) ||\r\n        (optionalRoot && root.empty)) {\r\n        return NoChord;\r\n    }\r\n    const rootInterval = distance(tonic.pc, root.pc);\r\n    const rootDegree = type.intervals.indexOf(rootInterval) + 1;\r\n    if (!root.empty && !rootDegree) {\r\n        return NoChord;\r\n    }\r\n    const notes = tonic.empty\r\n        ? []\r\n        : type.intervals.map((i) => transpose$1(tonic, i));\r\n    typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\r\n    const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${root.empty ? \"\" : \"/\" + root.pc}`;\r\n    const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${optionalRoot ? \" over \" + root.pc : \"\"}`;\r\n    return {\r\n        ...type,\r\n        name,\r\n        symbol,\r\n        type: type.name,\r\n        root: root.name,\r\n        rootDegree,\r\n        tonic: tonic.name,\r\n        notes,\r\n    };\r\n}\r\nconst chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\r\n/**\r\n * Transpose a chord name\r\n *\r\n * @param {string} chordName - the chord name\r\n * @return {string} the transposed chord\r\n *\r\n * @example\r\n * transpose('Dm7', 'P4') // => 'Gm7\r\n */\r\nfunction transpose(chordName, interval) {\r\n    const [tonic, type] = tokenize(chordName);\r\n    if (!tonic) {\r\n        return chordName;\r\n    }\r\n    return transpose$1(tonic, interval) + type;\r\n}\r\n/**\r\n * Get all scales where the given chord fits\r\n *\r\n * @example\r\n * chordScales('C7b9')\r\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\r\n */\r\nfunction chordScales(name) {\r\n    const s = get(name);\r\n    const isChordIncluded = isSupersetOf(s.chroma);\r\n    return all()\r\n        .filter((scale) => isChordIncluded(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Get all chords names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @example\r\n * extended(\"CMaj7\")\r\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\r\n */\r\nfunction extended(chordName) {\r\n    const s = get(chordName);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSuperset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\n/**\r\n * Find all chords names that are a subset of the given one\r\n * (has less notes but all from the given chord)\r\n *\r\n * @example\r\n */\r\nfunction reduced(chordName) {\r\n    const s = get(chordName);\r\n    const isSubset = isSubsetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSubset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\nvar index = {\r\n    getChord,\r\n    get,\r\n    detect,\r\n    chordScales,\r\n    extended,\r\n    reduced,\r\n    tokenize,\r\n    transpose,\r\n    // deprecate\r\n    chord,\r\n};\n\nexport default index;\nexport { chord, chordScales, extended, get, getChord, reduced, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n","// source: https://en.wikipedia.org/wiki/Note_value\r\nconst DATA = [\r\n    [\r\n        0.125,\r\n        \"dl\",\r\n        [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\r\n    ],\r\n    [0.25, \"l\", [\"long\", \"longa\"]],\r\n    [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\r\n    [1, \"w\", [\"whole\", \"semibreve\"]],\r\n    [2, \"h\", [\"half\", \"minim\"]],\r\n    [4, \"q\", [\"quarter\", \"crotchet\"]],\r\n    [8, \"e\", [\"eighth\", \"quaver\"]],\r\n    [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\r\n    [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\r\n    [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\r\n    [128, \"h\", [\"hundred twenty-eighth\"]],\r\n    [256, \"th\", [\"two hundred fifty-sixth\"]],\r\n];\n\nconst VALUES = [];\r\nDATA.forEach(([denominator, shorthand, names]) => add(denominator, shorthand, names));\r\nconst NoDuration = {\r\n    empty: true,\r\n    name: \"\",\r\n    value: 0,\r\n    fraction: [0, 0],\r\n    shorthand: \"\",\r\n    dots: \"\",\r\n    names: [],\r\n};\r\nfunction names() {\r\n    return VALUES.reduce((names, duration) => {\r\n        duration.names.forEach((name) => names.push(name));\r\n        return names;\r\n    }, []);\r\n}\r\nfunction shorthands() {\r\n    return VALUES.map((dur) => dur.shorthand);\r\n}\r\nconst REGEX = /^([^.]+)(\\.*)$/;\r\nfunction get(name) {\r\n    const [_, simple, dots] = REGEX.exec(name) || [];\r\n    const base = VALUES.find((dur) => dur.shorthand === simple || dur.names.includes(simple));\r\n    if (!base) {\r\n        return NoDuration;\r\n    }\r\n    const fraction = calcDots(base.fraction, dots.length);\r\n    const value = fraction[0] / fraction[1];\r\n    return { ...base, name, dots, value, fraction };\r\n}\r\nconst value = (name) => get(name).value;\r\nconst fraction = (name) => get(name).fraction;\r\nvar index = { names, shorthands, get, value, fraction };\r\n//// PRIVATE ////\r\nfunction add(denominator, shorthand, names) {\r\n    VALUES.push({\r\n        empty: false,\r\n        dots: \"\",\r\n        name: \"\",\r\n        value: 1 / denominator,\r\n        fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\r\n        shorthand,\r\n        names,\r\n    });\r\n}\r\nfunction calcDots(fraction, dots) {\r\n    const pow = Math.pow(2, dots);\r\n    let numerator = fraction[0] * pow;\r\n    let denominator = fraction[1] * pow;\r\n    const base = numerator;\r\n    // add fractions\r\n    for (let i = 0; i < dots; i++) {\r\n        numerator += base / Math.pow(2, i + 1);\r\n    }\r\n    // simplify\r\n    while (numerator % 2 === 0 && denominator % 2 === 0) {\r\n        numerator /= 2;\r\n        denominator /= 2;\r\n    }\r\n    return [numerator, denominator];\r\n}\n\nexport default index;\nexport { fraction, get, names, shorthands, value };\n//# sourceMappingURL=index.es.js.map\n","import { interval, distance as distance$1, coordToInterval } from '@tonaljs/core';\n\n/**\r\n * Get the natural list of names\r\n */\r\nfunction names() {\r\n    return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\r\n}\r\n/**\r\n * Get properties of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\r\n */\r\nconst get = interval;\r\n/**\r\n * Get name of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.name('4P') // => \"4P\"\r\n * Interval.name('P4') // => \"4P\"\r\n * Interval.name('C4') // => \"\"\r\n */\r\nconst name = (name) => interval(name).name;\r\n/**\r\n * Get semitones of an interval\r\n * @function\r\n * @example\r\n * Interval.semitones('P4') // => 5\r\n */\r\nconst semitones = (name) => interval(name).semitones;\r\n/**\r\n * Get quality of an interval\r\n * @function\r\n * @example\r\n * Interval.quality('P4') // => \"P\"\r\n */\r\nconst quality = (name) => interval(name).q;\r\n/**\r\n * Get number of an interval\r\n * @function\r\n * @example\r\n * Interval.num('P4') // => 4\r\n */\r\nconst num = (name) => interval(name).num;\r\n/**\r\n * Get the simplified version of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to simplify\r\n * @return {string} the simplified interval\r\n *\r\n * @example\r\n * Interval.simplify(\"9M\") // => \"2M\"\r\n * Interval.simplify(\"2M\") // => \"2M\"\r\n * Interval.simplify(\"-2M\") // => \"7m\"\r\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\r\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\r\n */\r\nfunction simplify(name) {\r\n    const i = interval(name);\r\n    return i.empty ? \"\" : i.simple + i.q;\r\n}\r\n/**\r\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\r\n * of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to invert in interval shorthand\r\n * notation or interval array notation\r\n * @return {string} the inverted interval\r\n *\r\n * @example\r\n * Interval.invert(\"3m\") // => \"6M\"\r\n * Interval.invert(\"2M\") // => \"7m\"\r\n */\r\nfunction invert(name) {\r\n    const i = interval(name);\r\n    if (i.empty) {\r\n        return \"\";\r\n    }\r\n    const step = (7 - i.step) % 7;\r\n    const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\r\n    return interval({ step, alt, oct: i.oct, dir: i.dir }).name;\r\n}\r\n// interval numbers\r\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\n// interval qualities\r\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\r\n/**\r\n * Get interval name from semitones number. Since there are several interval\r\n * names for the same number, the name it's arbitrary, but deterministic.\r\n *\r\n * @param {Integer} num - the number of semitones (can be negative)\r\n * @return {string} the interval name\r\n * @example\r\n * Interval.fromSemitones(7) // => \"5P\"\r\n * Interval.fromSemitones(-7) // => \"-5P\"\r\n */\r\nfunction fromSemitones(semitones) {\r\n    const d = semitones < 0 ? -1 : 1;\r\n    const n = Math.abs(semitones);\r\n    const c = n % 12;\r\n    const o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\n/**\r\n * Find interval between two notes\r\n *\r\n * @example\r\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\r\n */\r\nconst distance = distance$1;\r\n/**\r\n * Adds two intervals\r\n *\r\n * @function\r\n * @param {string} interval1\r\n * @param {string} interval2\r\n * @return {string} the added interval name\r\n * @example\r\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\r\n */\r\nconst add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\r\n/**\r\n * Returns a function that adds an interval\r\n *\r\n * @function\r\n * @example\r\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\r\n */\r\nconst addTo = (interval) => (other) => add(interval, other);\r\n/**\r\n * Subtracts two intervals\r\n *\r\n * @function\r\n * @param {string} minuendInterval\r\n * @param {string} subtrahendInterval\r\n * @return {string} the substracted interval name\r\n * @example\r\n * Interval.substract('5P', '3M') // => '3m'\r\n * Interval.substract('3M', '5P') // => '-3m'\r\n */\r\nconst substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    num,\r\n    semitones,\r\n    quality,\r\n    fromSemitones,\r\n    distance,\r\n    invert,\r\n    simplify,\r\n    add,\r\n    addTo,\r\n    substract,\r\n};\r\nfunction combinator(fn) {\r\n    return (a, b) => {\r\n        const coordA = interval(a).coord;\r\n        const coordB = interval(b).coord;\r\n        if (coordA && coordB) {\r\n            const coord = fn(coordA, coordB);\r\n            return coordToInterval(coord).name;\r\n        }\r\n    };\r\n}\n\nexport default index;\nexport { add, addTo, distance, fromSemitones, get, invert, name, names, num, quality, semitones, simplify, substract };\n//# sourceMappingURL=index.es.js.map\n","import { note } from '@tonaljs/core';\n\nfunction isMidi(arg) {\r\n    return +arg >= 0 && +arg <= 127;\r\n}\r\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\r\nfunction toMidi(note$1) {\r\n    if (isMidi(note$1)) {\r\n        return +note$1;\r\n    }\r\n    const n = note(note$1);\r\n    return n.empty ? null : n.midi;\r\n}\r\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\r\nfunction midiToFreq(midi, tuning = 440) {\r\n    return Math.pow(2, (midi - 69) / 12) * tuning;\r\n}\r\nconst L2 = Math.log(2);\r\nconst L440 = Math.log(440);\r\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\r\nfunction freqToMidi(freq) {\r\n    const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n}\r\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\r\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\r\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\r\nfunction midiToNoteName(midi, options = {}) {\r\n    if (isNaN(midi) || midi === -Infinity || midi === Infinity)\r\n        return \"\";\r\n    midi = Math.round(midi);\r\n    const pcs = options.sharps === true ? SHARPS : FLATS;\r\n    const pc = pcs[midi % 12];\r\n    if (options.pitchClass) {\r\n        return pc;\r\n    }\r\n    const o = Math.floor(midi / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar index = { isMidi, toMidi, midiToFreq, midiToNoteName, freqToMidi };\n\nexport default index;\nexport { freqToMidi, isMidi, midiToFreq, midiToNoteName, toMidi };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose as transpose$1, coordToNote } from '@tonaljs/core';\nimport { midiToNoteName, freqToMidi } from '@tonaljs/midi';\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\r\nconst toName = (n) => n.name;\r\nconst onlyNotes = (array) => array.map(note).filter((n) => !n.empty);\r\n/**\r\n * Return the natural note names without octave\r\n * @function\r\n * @example\r\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\r\n */\r\nfunction names(array) {\r\n    if (array === undefined) {\r\n        return NAMES.slice();\r\n    }\r\n    else if (!Array.isArray(array)) {\r\n        return [];\r\n    }\r\n    else {\r\n        return onlyNotes(array).map(toName);\r\n    }\r\n}\r\n/**\r\n * Get a note from a note name\r\n *\r\n * @function\r\n * @example\r\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nconst get = note;\r\n/**\r\n * Get the note name\r\n * @function\r\n */\r\nconst name = (note) => get(note).name;\r\n/**\r\n * Get the note pitch class name\r\n * @function\r\n */\r\nconst pitchClass = (note) => get(note).pc;\r\n/**\r\n * Get the note accidentals\r\n * @function\r\n */\r\nconst accidentals = (note) => get(note).acc;\r\n/**\r\n * Get the note octave\r\n * @function\r\n */\r\nconst octave = (note) => get(note).oct;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst midi = (note) => get(note).midi;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst freq = (note) => get(note).freq;\r\n/**\r\n * Get the note chroma\r\n * @function\r\n */\r\nconst chroma = (note) => get(note).chroma;\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidi(61) // => \"Db4\"\r\n * Note.fromMidi(61.7) // => \"D4\"\r\n */\r\nfunction fromMidi(midi) {\r\n    return midiToNoteName(midi);\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\r\nfunction fromFreq(freq) {\r\n    return midiToNoteName(freqToMidi(freq));\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\r\nfunction fromFreqSharps(freq) {\r\n    return midiToNoteName(freqToMidi(freq), { sharps: true });\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidiSharps(61) // => \"C#4\"\r\n */\r\nfunction fromMidiSharps(midi) {\r\n    return midiToNoteName(midi, { sharps: true });\r\n}\r\n/**\r\n * Transpose a note by an interval\r\n */\r\nconst transpose = transpose$1;\r\nconst tr = transpose$1;\r\n/**\r\n * Transpose by an interval.\r\n * @function\r\n * @param {string} interval\r\n * @return {function} a function that transposes by the given interval\r\n * @example\r\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\r\n * // => [\"G\", \"A\", \"B\"]\r\n */\r\nconst transposeBy = (interval) => (note) => transpose(note, interval);\r\nconst trBy = transposeBy;\r\n/**\r\n * Transpose from a note\r\n * @function\r\n * @param {string} note\r\n * @return {function}  a function that transposes the the note by an interval\r\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\r\n * // => [\"C\", \"E\", \"G\"]\r\n */\r\nconst transposeFrom = (note) => (interval) => transpose(note, interval);\r\nconst trFrom = transposeFrom;\r\n/**\r\n * Transpose a note by a number of perfect fifths.\r\n *\r\n * @function\r\n * @param {string} note - the note name\r\n * @param {number} fifhts - the number of fifths\r\n * @return {string} the transposed note name\r\n *\r\n * @example\r\n * import { transposeFifths } from \"@tonaljs/note\"\r\n * transposeFifths(\"G4\", 1) // => \"D\"\r\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\r\n */\r\nfunction transposeFifths(noteName, fifths) {\r\n    const note = get(noteName);\r\n    if (note.empty) {\r\n        return \"\";\r\n    }\r\n    const [nFifths, nOcts] = note.coord;\r\n    const transposed = nOcts === undefined\r\n        ? coordToNote([nFifths + fifths])\r\n        : coordToNote([nFifths + fifths, nOcts]);\r\n    return transposed.name;\r\n}\r\nconst trFifths = transposeFifths;\r\nconst ascending = (a, b) => a.height - b.height;\r\nconst descending = (a, b) => b.height - a.height;\r\nfunction sortedNames(notes, comparator) {\r\n    comparator = comparator || ascending;\r\n    return onlyNotes(notes).sort(comparator).map(toName);\r\n}\r\nfunction sortedUniqNames(notes) {\r\n    return sortedNames(notes, ascending).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Simplify a note\r\n *\r\n * @function\r\n * @param {string} note - the note to be simplified\r\n * - sameAccType: default true. Use same kind of accidentals that source\r\n * @return {string} the simplified note or '' if not valid note\r\n * @example\r\n * simplify(\"C##\") // => \"D\"\r\n * simplify(\"C###\") // => \"D#\"\r\n * simplify(\"C###\")\r\n * simplify(\"B#4\") // => \"C5\"\r\n */\r\nconst simplify = nameBuilder(true);\r\n/**\r\n * Get enharmonic of a note\r\n *\r\n * @function\r\n * @param {string} note\r\n * @return {string} the enharmonic note or '' if not valid note\r\n * @example\r\n * Note.enharmonic(\"Db\") // => \"C#\"\r\n * Note.enharmonic(\"C\") // => \"C\"\r\n */\r\nconst enharmonic = nameBuilder(false);\r\nfunction nameBuilder(sameAccidentals) {\r\n    return (noteName) => {\r\n        const note = get(noteName);\r\n        if (note.empty) {\r\n            return \"\";\r\n        }\r\n        const sharps = sameAccidentals ? note.alt > 0 : note.alt < 0;\r\n        const pitchClass = note.midi === null;\r\n        return midiToNoteName(note.midi || note.chroma, { sharps, pitchClass });\r\n    };\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    pitchClass,\r\n    accidentals,\r\n    octave,\r\n    midi,\r\n    ascending,\r\n    descending,\r\n    sortedNames,\r\n    sortedUniqNames,\r\n    fromMidi,\r\n    fromMidiSharps,\r\n    freq,\r\n    fromFreq,\r\n    fromFreqSharps,\r\n    chroma,\r\n    transpose,\r\n    tr,\r\n    transposeBy,\r\n    trBy,\r\n    transposeFrom,\r\n    trFrom,\r\n    transposeFifths,\r\n    trFifths,\r\n    simplify,\r\n    enharmonic,\r\n};\n\nexport default index;\nexport { accidentals, ascending, chroma, descending, enharmonic, freq, fromFreq, fromFreqSharps, fromMidi, fromMidiSharps, get, midi, name, names, octave, pitchClass, simplify, sortedNames, sortedUniqNames, tr, trBy, trFifths, trFrom, transpose, transposeBy, transposeFifths, transposeFrom };\n//# sourceMappingURL=index.es.js.map\n","import { isPitch, altToAcc, isNamed, deprecate, accToAlt, interval } from '@tonaljs/core';\n\nconst NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\r\nconst cache = {};\r\n/**\r\n * Get properties of a roman numeral string\r\n *\r\n * @function\r\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\r\n * @return {Object} - the roman numeral properties\r\n * @param {string} name - the roman numeral (tonic)\r\n * @param {string} type - the chord type\r\n * @param {string} num - the number (1 = I, 2 = II...)\r\n * @param {boolean} major - major or not\r\n *\r\n * @example\r\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\r\n */\r\nfunction get(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : typeof src === \"number\"\r\n            ? get(NAMES[src] || \"\")\r\n            : isPitch(src)\r\n                ? fromPitch(src)\r\n                : isNamed(src)\r\n                    ? get(src.name)\r\n                    : NoRomanNumeral;\r\n}\r\nconst romanNumeral = deprecate(\"RomanNumeral.romanNumeral\", \"RomanNumeral.get\", get);\r\n/**\r\n * Get roman numeral names\r\n *\r\n * @function\r\n * @param {boolean} [isMajor=true]\r\n * @return {Array<String>}\r\n *\r\n * @example\r\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\r\n */\r\nfunction names(major = true) {\r\n    return (major ? NAMES : NAMES_MINOR).slice();\r\n}\r\nfunction fromPitch(pitch) {\r\n    return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\r\n}\r\nconst REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\r\nfunction tokenize(str) {\r\n    return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]);\r\n}\r\nconst ROMANS = \"I II III IV V VI VII\";\r\nconst NAMES = ROMANS.split(\" \");\r\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\r\nfunction parse(src) {\r\n    const [name, acc, roman, chordType] = tokenize(src);\r\n    if (!roman) {\r\n        return NoRomanNumeral;\r\n    }\r\n    const upperRoman = roman.toUpperCase();\r\n    const step = NAMES.indexOf(upperRoman);\r\n    const alt = accToAlt(acc);\r\n    const dir = 1;\r\n    return {\r\n        empty: false,\r\n        name,\r\n        roman,\r\n        interval: interval({ step, alt, dir }).name,\r\n        acc,\r\n        chordType,\r\n        alt,\r\n        step,\r\n        major: roman === upperRoman,\r\n        oct: 0,\r\n        dir,\r\n    };\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    // deprecated\r\n    romanNumeral,\r\n};\n\nexport default index;\nexport { get, names, tokenize };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose, altToAcc, accToAlt } from '@tonaljs/core';\nimport { transposeFifths } from '@tonaljs/note';\nimport { get } from '@tonaljs/roman-numeral';\n\nconst Empty = Object.freeze([]);\r\nconst NoKey = {\r\n    type: \"major\",\r\n    tonic: \"\",\r\n    alteration: 0,\r\n    keySignature: \"\",\r\n};\r\nconst NoKeyScale = {\r\n    tonic: \"\",\r\n    grades: Empty,\r\n    intervals: Empty,\r\n    scale: Empty,\r\n    chords: Empty,\r\n    chordsHarmonicFunction: Empty,\r\n    chordScales: Empty,\r\n};\r\nconst NoMajorKey = {\r\n    ...NoKey,\r\n    ...NoKeyScale,\r\n    type: \"major\",\r\n    minorRelative: \"\",\r\n    scale: Empty,\r\n    secondaryDominants: Empty,\r\n    secondaryDominantsMinorRelative: Empty,\r\n    substituteDominants: Empty,\r\n    substituteDominantsMinorRelative: Empty,\r\n};\r\nconst NoMinorKey = {\r\n    ...NoKey,\r\n    type: \"minor\",\r\n    relativeMajor: \"\",\r\n    natural: NoKeyScale,\r\n    harmonic: NoKeyScale,\r\n    melodic: NoKeyScale,\r\n};\r\nconst mapScaleToType = (scale, list, sep = \"\") => list.map((type, i) => `${scale[i]}${sep}${type}`);\r\nfunction keyScale(grades, chords, harmonicFunctions, chordScales) {\r\n    return (tonic) => {\r\n        const intervals = grades.map((gr) => get(gr).interval || \"\");\r\n        const scale = intervals.map((interval) => transpose(tonic, interval));\r\n        return {\r\n            tonic,\r\n            grades,\r\n            intervals,\r\n            scale,\r\n            chords: mapScaleToType(scale, chords),\r\n            chordsHarmonicFunction: mapScaleToType(scale, harmonicFunctions),\r\n            chordScales: mapScaleToType(scale, chordScales, \" \"),\r\n        };\r\n    };\r\n}\r\nconst distInFifths = (from, to) => {\r\n    const f = note(from);\r\n    const t = note(to);\r\n    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\r\n};\r\nconst MajorScale = keyScale(\"I II III IV V VI VII\".split(\" \"), \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"), \"T SD T SD D T D\".split(\" \"), \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"));\r\nconst NaturalScale = keyScale(\"I II bIII IV V bVI bVII\".split(\" \"), \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"), \"T SD T SD D SD SD\".split(\" \"), \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"));\r\nconst HarmonicScale = keyScale(\"I II bIII IV V bVI VII\".split(\" \"), \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"), \"T SD T SD D SD D\".split(\" \"), \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\",\"));\r\nconst MelodicScale = keyScale(\"I II bIII IV V VI VII\".split(\" \"), \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"), \"T SD T SD D - -\".split(\" \"), \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\",\"));\r\n/**\r\n * Get a major key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction majorKey(tonic) {\r\n    const pc = note(tonic).pc;\r\n    if (!pc)\r\n        return NoMajorKey;\r\n    const keyScale = MajorScale(pc);\r\n    const alteration = distInFifths(\"C\", pc);\r\n    const romanInTonic = (src) => {\r\n        const r = get(src);\r\n        if (r.empty)\r\n            return \"\";\r\n        return transpose(tonic, r.interval) + r.chordType;\r\n    };\r\n    return {\r\n        ...keyScale,\r\n        type: \"major\",\r\n        minorRelative: transpose(pc, \"-3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\r\n        secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n    };\r\n}\r\n/**\r\n * Get minor key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction minorKey(tnc) {\r\n    const pc = note(tnc).pc;\r\n    if (!pc)\r\n        return NoMinorKey;\r\n    const alteration = distInFifths(\"C\", pc) - 3;\r\n    return {\r\n        type: \"minor\",\r\n        tonic: pc,\r\n        relativeMajor: transpose(pc, \"3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        natural: NaturalScale(pc),\r\n        harmonic: HarmonicScale(pc),\r\n        melodic: MelodicScale(pc),\r\n    };\r\n}\r\n/**\r\n * Given a key signature, returns the tonic of the major key\r\n * @param sigature\r\n * @example\r\n * majorTonicFromKeySignature('###') // => 'A'\r\n */\r\nfunction majorTonicFromKeySignature(sig) {\r\n    if (typeof sig === \"number\") {\r\n        return transposeFifths(\"C\", sig);\r\n    }\r\n    else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\r\n        return transposeFifths(\"C\", accToAlt(sig));\r\n    }\r\n    return null;\r\n}\r\nvar index = { majorKey, majorTonicFromKeySignature, minorKey };\n\nexport default index;\nexport { majorKey, majorTonicFromKeySignature, minorKey };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { chromaToIntervals, EmptyPcset } from '@tonaljs/pcset';\n\nconst DATA = [\r\n    [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\r\n    [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\r\n    [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\r\n    [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\r\n    [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\r\n    [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\r\n    [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\r\n];\n\nconst NoMode = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    alt: 0,\r\n    modeNum: NaN,\r\n    triad: \"\",\r\n    seventh: \"\",\r\n    aliases: [],\r\n};\r\nconst modes = DATA.map(toMode);\r\nconst index = {};\r\nmodes.forEach((mode) => {\r\n    index[mode.name] = mode;\r\n    mode.aliases.forEach((alias) => {\r\n        index[alias] = mode;\r\n    });\r\n});\r\n/**\r\n * Get a Mode by it's name\r\n *\r\n * @example\r\n * get('dorian')\r\n * // =>\r\n * // {\r\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\r\n * //   modeNum: 1,\r\n * //   chroma: '101101010110',\r\n * //   normalized: '101101010110',\r\n * //   name: 'dorian',\r\n * //   setNum: 2902,\r\n * //   alt: 2,\r\n * //   triad: 'm',\r\n * //   seventh: 'm7',\r\n * //   aliases: []\r\n * // }\r\n */\r\nfunction get(name) {\r\n    return typeof name === \"string\"\r\n        ? index[name.toLowerCase()] || NoMode\r\n        : name && name.name\r\n            ? get(name.name)\r\n            : NoMode;\r\n}\r\nconst mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\r\n/**\r\n * Get a list of all modes\r\n */\r\nfunction all() {\r\n    return modes.slice();\r\n}\r\nconst entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\r\n/**\r\n * Get a list of all mode names\r\n */\r\nfunction names() {\r\n    return modes.map((mode) => mode.name);\r\n}\r\nfunction toMode(mode) {\r\n    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\r\n    const aliases = alias ? [alias] : [];\r\n    const chroma = Number(setNum).toString(2);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        intervals,\r\n        modeNum,\r\n        chroma,\r\n        normalized: chroma,\r\n        name,\r\n        setNum,\r\n        alt,\r\n        triad,\r\n        seventh,\r\n        aliases,\r\n    };\r\n}\r\nvar index$1 = {\r\n    get,\r\n    names,\r\n    all,\r\n    // deprecated\r\n    entries,\r\n    mode,\r\n};\n\nexport default index$1;\nexport { all, entries, get, mode, names };\n//# sourceMappingURL=index.es.js.map\n","import { tokenize } from '@tonaljs/chord';\nimport { transpose, interval, distance } from '@tonaljs/core';\nimport { get } from '@tonaljs/roman-numeral';\n\n/**\r\n * Given a tonic and a chord list expressed with roman numeral notation\r\n * returns the progression expressed with leadsheet chords symbols notation\r\n * @example\r\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\r\n * // => [\"C\", \"Dm7\", \"G7\"]\r\n */\r\nfunction fromRomanNumerals(tonic, chords) {\r\n    const romanNumerals = chords.map(get);\r\n    return romanNumerals.map((rn) => transpose(tonic, interval(rn)) + rn.chordType);\r\n}\r\n/**\r\n * Given a tonic and a chord list with leadsheet symbols notation,\r\n * return the chord list with roman numeral notation\r\n * @example\r\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\r\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\r\n */\r\nfunction toRomanNumerals(tonic, chords) {\r\n    return chords.map((chord) => {\r\n        const [note, chordType] = tokenize(chord);\r\n        const intervalName = distance(tonic, note);\r\n        const roman = get(interval(intervalName));\r\n        return roman.name + chordType;\r\n    });\r\n}\r\nvar index = { fromRomanNumerals, toRomanNumerals };\n\nexport default index;\nexport { fromRomanNumerals, toRomanNumerals };\n//# sourceMappingURL=index.es.js.map\n","import { compact, range } from '@tonaljs/collection';\nimport { toMidi, midiToNoteName } from '@tonaljs/midi';\n\n/**\r\n * Create a numeric range. You supply a list of notes or numbers and it will\r\n * be connected to create complex ranges.\r\n *\r\n * @param {Array} array - the list of notes or numbers used\r\n * @return {Array} an array of numbers or empty array if not valid parameters\r\n *\r\n * @example\r\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\r\n * // it works midi notes\r\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\r\n * // complex range\r\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\r\n */\r\nfunction numeric(notes) {\r\n    const midi = compact(notes.map(toMidi));\r\n    if (!notes.length || midi.length !== notes.length) {\r\n        // there is no valid notes\r\n        return [];\r\n    }\r\n    return midi.reduce((result, note) => {\r\n        const last = result[result.length - 1];\r\n        return result.concat(range(last, note).slice(1));\r\n    }, [midi[0]]);\r\n}\r\n/**\r\n * Create a range of chromatic notes. The altered notes will use flats.\r\n *\r\n * @function\r\n * @param {String|Array} list - the list of notes or midi note numbers\r\n * @return {Array} an array of note names\r\n *\r\n * @example\r\n * Range.chromatic(\"C2 E2 D2\") // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\r\n * // with sharps\r\n * Range.chromatic(\"C2 C3\", true) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\r\n */\r\nfunction chromatic(notes, options) {\r\n    return numeric(notes).map((midi) => midiToNoteName(midi, options));\r\n}\r\nvar index = { numeric, chromatic };\n\nexport default index;\nexport { chromatic, numeric };\n//# sourceMappingURL=index.es.js.map\n","import { all } from '@tonaljs/chord-type';\nimport { rotate } from '@tonaljs/collection';\nimport { note, transpose, deprecate } from '@tonaljs/core';\nimport { sortedUniqNames } from '@tonaljs/note';\nimport { isSubsetOf, isSupersetOf, modes } from '@tonaljs/pcset';\nimport { names as names$1, get as get$1, all as all$1 } from '@tonaljs/scale-type';\n\n/**\r\n * References:\r\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\r\n * @module scale\r\n */\r\nconst NoScale = {\r\n    empty: true,\r\n    name: \"\",\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n/**\r\n * Given a string with a scale name and (optionally) a tonic, split\r\n * that components.\r\n *\r\n * It retuns an array with the form [ name, tonic ] where tonic can be a\r\n * note name or null and name can be any arbitrary string\r\n * (this function doesn\"t check if that scale name exists)\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array} an array [tonic, name]\r\n * @example\r\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\r\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\r\n * tokenize() // => [\"\", \"\"]\r\n */\r\nfunction tokenize(name) {\r\n    if (typeof name !== \"string\") {\r\n        return [\"\", \"\"];\r\n    }\r\n    const i = name.indexOf(\" \");\r\n    const tonic = note(name.substring(0, i));\r\n    if (tonic.empty) {\r\n        const n = note(name);\r\n        return n.empty ? [\"\", name] : [n.name, \"\"];\r\n    }\r\n    const type = name.substring(tonic.name.length + 1);\r\n    return [tonic.name, type.length ? type : \"\"];\r\n}\r\n/**\r\n * Get all scale names\r\n * @function\r\n */\r\nconst names = names$1;\r\n/**\r\n * Get a Scale from a scale name.\r\n */\r\nfunction get(src) {\r\n    const tokens = Array.isArray(src) ? src : tokenize(src);\r\n    const tonic = note(tokens[0]).name;\r\n    const st = get$1(tokens[1]);\r\n    if (st.empty) {\r\n        return NoScale;\r\n    }\r\n    const type = st.name;\r\n    const notes = tonic\r\n        ? st.intervals.map((i) => transpose(tonic, i))\r\n        : [];\r\n    const name = tonic ? tonic + \" \" + type : type;\r\n    return { ...st, name, type, tonic, notes };\r\n}\r\nconst scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\r\n/**\r\n * Get all chords that fits a given scale\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array<string>} - the chord names\r\n *\r\n * @example\r\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\r\n */\r\nfunction scaleChords(name) {\r\n    const s = get(name);\r\n    const inScale = isSubsetOf(s.chroma);\r\n    return all()\r\n        .filter((chord) => inScale(chord.chroma))\r\n        .map((chord) => chord.aliases[0]);\r\n}\r\n/**\r\n * Get all scales names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n * @example\r\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\r\n */\r\nfunction extended(name) {\r\n    const s = get(name);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((scale) => isSuperset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Find all scales names that are a subset of the given one\r\n * (has less notes but all from the given scale)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n *\r\n * @example\r\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\r\n */\r\nfunction reduced(name) {\r\n    const isSubset = isSubsetOf(get(name).chroma);\r\n    return all$1()\r\n        .filter((scale) => isSubset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Given an array of notes, return the scale: a pitch class set starting from\r\n * the first note of the array\r\n *\r\n * @function\r\n * @param {string[]} notes\r\n * @return {string[]} pitch classes with same tonic\r\n * @example\r\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\r\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\r\n */\r\nfunction scaleNotes(notes) {\r\n    const pcset = notes.map((n) => note(n).pc).filter((x) => x);\r\n    const tonic = pcset[0];\r\n    const scale = sortedUniqNames(pcset);\r\n    return rotate(scale.indexOf(tonic), scale);\r\n}\r\n/**\r\n * Find mode names of a scale\r\n *\r\n * @function\r\n * @param {string} name - scale name\r\n * @example\r\n * modeNames(\"C pentatonic\") // => [\r\n *   [\"C\", \"major pentatonic\"],\r\n *   [\"D\", \"egyptian\"],\r\n *   [\"E\", \"malkos raga\"],\r\n *   [\"G\", \"ritusen\"],\r\n *   [\"A\", \"minor pentatonic\"]\r\n * ]\r\n */\r\nfunction modeNames(name) {\r\n    const s = get(name);\r\n    if (s.empty) {\r\n        return [];\r\n    }\r\n    const tonics = s.tonic ? s.notes : s.intervals;\r\n    return modes(s.chroma)\r\n        .map((chroma, i) => {\r\n        const modeName = get(chroma).name;\r\n        return modeName ? [tonics[i], modeName] : [\"\", \"\"];\r\n    })\r\n        .filter((x) => x[0]);\r\n}\r\nvar index = {\r\n    get,\r\n    names,\r\n    extended,\r\n    modeNames,\r\n    reduced,\r\n    scaleChords,\r\n    scaleNotes,\r\n    tokenize,\r\n    // deprecated\r\n    scale,\r\n};\n\nexport default index;\nexport { extended, get, modeNames, names, reduced, scale, scaleChords, scaleNotes, tokenize };\n//# sourceMappingURL=index.es.js.map\n","// CONSTANTS\r\nconst NONE = {\r\n    empty: true,\r\n    name: \"\",\r\n    upper: undefined,\r\n    lower: undefined,\r\n    type: undefined,\r\n    additive: [],\r\n};\r\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\r\n// PUBLIC API\r\nfunction names() {\r\n    return NAMES.slice();\r\n}\r\nconst REGEX = /^(\\d?\\d(?:\\+\\d)*)\\/(\\d)$/;\r\nconst CACHE = new Map();\r\nfunction get(literal) {\r\n    const cached = CACHE.get(literal);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const ts = build(parse(literal));\r\n    CACHE.set(literal, ts);\r\n    return ts;\r\n}\r\nfunction parse(literal) {\r\n    if (typeof literal === \"string\") {\r\n        const [_, up, low] = REGEX.exec(literal) || [];\r\n        return parse([up, low]);\r\n    }\r\n    const [up, down] = literal;\r\n    const denominator = +down;\r\n    if (typeof up === \"number\") {\r\n        return [up, denominator];\r\n    }\r\n    const list = up.split(\"+\").map((n) => +n);\r\n    return list.length === 1 ? [list[0], denominator] : [list, denominator];\r\n}\r\nvar index = { names, parse, get };\r\n// PRIVATE\r\nfunction build([up, down]) {\r\n    const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\r\n    const lower = down;\r\n    if (upper === 0 || lower === 0) {\r\n        return NONE;\r\n    }\r\n    const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\r\n    const additive = Array.isArray(up) ? up : [];\r\n    const type = lower === 4 || lower === 2\r\n        ? \"simple\"\r\n        : lower === 8 && upper % 3 === 0\r\n            ? \"compound\"\r\n            : \"irregular\";\r\n    return {\r\n        empty: false,\r\n        name,\r\n        type,\r\n        upper,\r\n        lower,\r\n        additive,\r\n    };\r\n}\n\nexport default index;\nexport { get, names, parse };\n//# sourceMappingURL=index.es.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tonaljs/abc-notation'), require('@tonaljs/array'), require('@tonaljs/chord'), require('@tonaljs/chord-type'), require('@tonaljs/collection'), require('@tonaljs/core'), require('@tonaljs/duration-value'), require('@tonaljs/interval'), require('@tonaljs/key'), require('@tonaljs/midi'), require('@tonaljs/mode'), require('@tonaljs/note'), require('@tonaljs/pcset'), require('@tonaljs/progression'), require('@tonaljs/range'), require('@tonaljs/roman-numeral'), require('@tonaljs/scale'), require('@tonaljs/scale-type'), require('@tonaljs/time-signature')) :\n  typeof define === 'function' && define.amd ? define(['exports', '@tonaljs/abc-notation', '@tonaljs/array', '@tonaljs/chord', '@tonaljs/chord-type', '@tonaljs/collection', '@tonaljs/core', '@tonaljs/duration-value', '@tonaljs/interval', '@tonaljs/key', '@tonaljs/midi', '@tonaljs/mode', '@tonaljs/note', '@tonaljs/pcset', '@tonaljs/progression', '@tonaljs/range', '@tonaljs/roman-numeral', '@tonaljs/scale', '@tonaljs/scale-type', '@tonaljs/time-signature'], factory) :\n  (global = global || self, factory(global.Tonal = {}, global.abcNotation, global.array, global.chord, global.ChordType, global.collection, global.Core, global.durationValue, global.interval, global.key, global.midi, global.mode, global.note, global.Pcset, global.progression, global.range, global.romanNumeral, global.scale, global.ScaleType, global.timeSignature));\n}(this, (function (exports, abcNotation, array, chord, ChordType, collection, Core, durationValue, interval, key, midi, mode, note, Pcset, progression, range, romanNumeral, scale, ScaleType, timeSignature) { 'use strict';\n\n  abcNotation = abcNotation && Object.prototype.hasOwnProperty.call(abcNotation, 'default') ? abcNotation['default'] : abcNotation;\n  chord = chord && Object.prototype.hasOwnProperty.call(chord, 'default') ? chord['default'] : chord;\n  ChordType = ChordType && Object.prototype.hasOwnProperty.call(ChordType, 'default') ? ChordType['default'] : ChordType;\n  collection = collection && Object.prototype.hasOwnProperty.call(collection, 'default') ? collection['default'] : collection;\n  durationValue = durationValue && Object.prototype.hasOwnProperty.call(durationValue, 'default') ? durationValue['default'] : durationValue;\n  interval = interval && Object.prototype.hasOwnProperty.call(interval, 'default') ? interval['default'] : interval;\n  key = key && Object.prototype.hasOwnProperty.call(key, 'default') ? key['default'] : key;\n  midi = midi && Object.prototype.hasOwnProperty.call(midi, 'default') ? midi['default'] : midi;\n  mode = mode && Object.prototype.hasOwnProperty.call(mode, 'default') ? mode['default'] : mode;\n  note = note && Object.prototype.hasOwnProperty.call(note, 'default') ? note['default'] : note;\n  Pcset = Pcset && Object.prototype.hasOwnProperty.call(Pcset, 'default') ? Pcset['default'] : Pcset;\n  progression = progression && Object.prototype.hasOwnProperty.call(progression, 'default') ? progression['default'] : progression;\n  range = range && Object.prototype.hasOwnProperty.call(range, 'default') ? range['default'] : range;\n  romanNumeral = romanNumeral && Object.prototype.hasOwnProperty.call(romanNumeral, 'default') ? romanNumeral['default'] : romanNumeral;\n  scale = scale && Object.prototype.hasOwnProperty.call(scale, 'default') ? scale['default'] : scale;\n  ScaleType = ScaleType && Object.prototype.hasOwnProperty.call(ScaleType, 'default') ? ScaleType['default'] : ScaleType;\n  timeSignature = timeSignature && Object.prototype.hasOwnProperty.call(timeSignature, 'default') ? timeSignature['default'] : timeSignature;\n\n  // deprecated (backwards compatibility)\r\n  var Tonal = Core;\r\n  var PcSet = Pcset;\r\n  var ChordDictionary = ChordType;\r\n  var ScaleDictionary = ScaleType;\n\n  Object.keys(Core).forEach(function (k) {\n    if (k !== 'default') Object.defineProperty(exports, k, {\n      enumerable: true,\n      get: function () {\n        return Core[k];\n      }\n    });\n  });\n  exports.AbcNotation = abcNotation;\n  exports.Array = array;\n  exports.Chord = chord;\n  exports.ChordType = ChordType;\n  exports.Collection = collection;\n  exports.Core = Core;\n  exports.DurationValue = durationValue;\n  exports.Interval = interval;\n  exports.Key = key;\n  exports.Midi = midi;\n  exports.Mode = mode;\n  exports.Note = note;\n  exports.Pcset = Pcset;\n  exports.Progression = progression;\n  exports.Range = range;\n  exports.RomanNumeral = romanNumeral;\n  exports.Scale = scale;\n  exports.ScaleType = ScaleType;\n  exports.TimeSignature = timeSignature;\n  exports.ChordDictionary = ChordDictionary;\n  exports.PcSet = PcSet;\n  exports.ScaleDictionary = ScaleDictionary;\n  exports.Tonal = Tonal;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.js.map\n"],"names":["fillStr","s","n","Array","Math","abs","join","deprecate","original","alternative","fn","args","console","warn","apply","this","isNamed","src","name","isPitch","pitch","step","alt","FIFTHS","STEPS_TO_OCTS","map","fifths","floor","encode","oct","dir","f","undefined","FIFTHS_TO_STEPS","decode","coord","o","i","unaltered","NoNote","empty","pc","acc","cache","Map","stepToLetter","charAt","altToAcc","accToAlt","length","note","cached","get","value","noteName","tokens","tokenizeNote","letter","octStr","charCodeAt","chroma","SEMI","height","m","midi","freq","pow","parse","props","pitchName","set","REGEX","str","exec","toUpperCase","replace","coordToNote","noteCoord","NoInterval","REGEX$1","RegExp","tokenizeInterval","cache$1","interval","num","q","t","type","simple","test","qToAlt","semitones","SIZES","parse$1","altToQ","pitchName$1","coordToInterval","transpose","intervalName","note$1","interval$1","intervalCoord","distance","fromNote","toNote","from","to","fcoord","tcoord","character","times","tokenize","abcToScientificNotation","a","scientificToAbcNotation","toLowerCase","index","transpose$1","distance$1","sortedNoteNames","notes","filter","sort","b","arr","permutations","slice","reduce","perm","concat","e","pos","newPerm","splice","ascR","descR","len","rnd","random","range","rotate","compact","EmptyPcset","setNum","normalized","intervals","setNumToChroma","Number","toString","chromaToNumber","parseInt","isChroma","[object Object]","isArray","binary","listToChroma","isPcset","normalizedNum","split","_","chromaRotations","chromaToIntervals","chromaToPcset","pcset","IVLS","push","modes","normalize","r","isSubsetOf","isSupersetOf","isNoteIncludedIn","chromas","isEqual","s1","s2","isIncluded","NoChordType","quality","aliases","dictionary","chordType","all","entries","add","fullName","has","indexOf","getQuality","chord","get$1","forEach","alias","addAlias","ivls","names","index$1","x","symbols","removeAll","keys","Object","NotFound","weight","NoScaleType","scale","scaleType","NoChord","symbol","root","rootDegree","tonic","NaN","NUM_TYPES","getChord","typeName","optionalTonic","optionalRoot","rootInterval","detect","source","tonicChroma","pcToName","record","namedSet","mode","chordName","baseNote","findExactMatches","chordScales","isChordIncluded","extended","isSuperset","all$1","reduced","isSubset","VALUES","denominator","shorthand","dots","fraction","NoDuration","base","find","dur","includes","numerator","calcDots","duration","shorthands","IN","IQ","combinator","substract","fromSemitones","d","c","invert","simplify","addTo","other","coordA","coordB","isMidi","arg","toMidi","L2","log","L440","freqToMidi","v","round","SHARPS","FLATS","midiToNoteName","options","isNaN","Infinity","sharps","pitchClass","midiToFreq","tuning","NAMES","toName","onlyNotes","array","tr","transposeBy","trBy","transposeFrom","trFrom","transposeFifths","nFifths","nOcts","trFifths","ascending","sortedNames","comparator","sortedUniqNames","nameBuilder","enharmonic","sameAccidentals","accidentals","octave","descending","fromMidi","fromMidiSharps","fromFreq","fromFreqSharps","NoRomanNumeral","roman","upperRoman","major","romanNumeral","ROMANS","NAMES_MINOR","Empty","freeze","NoKey","alteration","keySignature","NoKeyScale","grades","chords","chordsHarmonicFunction","NoMajorKey","minorRelative","secondaryDominants","secondaryDominantsMinorRelative","substituteDominants","substituteDominantsMinorRelative","NoMinorKey","relativeMajor","natural","harmonic","melodic","mapScaleToType","list","sep","keyScale","harmonicFunctions","gr","distInFifths","MajorScale","NaturalScale","HarmonicScale","MelodicScale","majorKey","romanInTonic","majorTonicFromKeySignature","sig","minorKey","tnc","NoMode","modeNum","triad","seventh","fromRomanNumerals","rn","toRomanNumerals","numeric","result","last","chromatic","NoScale","substring","st","names$1","modeNames","tonics","modeName","scaleChords","inScale","scaleNotes","NONE","upper","lower","additive","CACHE","literal","up","low","down","ts","build","exports","abcNotation","ChordType","collection","Core","durationValue","key","Pcset","progression","ScaleType","timeSignature","prototype","hasOwnProperty","call","Tonal","PcSet","ChordDictionary","ScaleDictionary","k","defineProperty","enumerable","AbcNotation","Chord","Collection","DurationValue","Interval","Key","Midi","Mode","Note","Progression","Range","RomanNumeral","Scale","TimeSignature","factory","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18"],"mappings":"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"}